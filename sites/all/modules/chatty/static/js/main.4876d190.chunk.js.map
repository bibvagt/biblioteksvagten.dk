{"version":3,"sources":["shared/utils/getUrlParam.js","clientChat/context/ChatContext.js","shared/Apollo/mutation/createQuestion.js","clientChat/components/Question/Form.js","clientChat/components/Question/index.js","shared/Apollo/query/getQuestion.js","shared/Apollo/mutation/createMessage.js","backendChat/context/ChatContext.js","shared/Apollo/mutation/makeHeartbeat.js","clientChat/context/SettingsContext.js","clientChat/components/Chat/StatusBar.js","shared/Apollo/subscription/newMessage.js","shared/Apollo/subscription/questionClosed.js","shared/Apollo/subscription/questionAssigned.js","shared/Apollo/subscription/questionReopened.js","shared/utils/convertTimestampToDate.js","shared/utils/generateDateString.js","clientChat/components/Chat/Message.js","shared/utils/scrollToBottom.js","clientChat/components/Chat/MessageList.js","clientChat/components/Chat/Form.js","clientChat/components/Chat/index.js","clientChat/components/App.js","shared/Apollo/index.js","clientChat/context/Store.js","shared/Apollo/query/getSettings.js","clientChat/components/Settings.js","clientChat/index.js","shared/Apollo/query/getQuestions.js","shared/Apollo/subscription/newQuestion.js","shared/Apollo/subscription/questionAssignedToConsultant.js","shared/Apollo/mutation/assignQuestion.js","shared/utils/calculateOffline.js","backendChat/components/Sidebar/QuestionTeaser.js","backendChat/components/Sidebar/QuestionList.js","shared/Apollo/subscription/questionHeartbeat.js","backendChat/components/Sidebar/AvailableQuestions.js","shared/Apollo/subscription/assignedQuestionClosed.js","backendChat/components/Sidebar/AssignedQuestions.js","backendChat/components/Sidebar/index.js","backendChat/components/Chat/OfflineMessage.js","backendChat/components/Chat/ReadonlyMessage.js","backendChat/components/Chat/Bar.js","backendChat/components/Chat/Message.js","backendChat/components/Chat/MessageList.js","shared/Apollo/mutation/closeQuestion.js","shared/Apollo/mutation/reopenQuestion.js","backendChat/components/Modal.js","backendChat/components/Chat/actions/CloseButton.js","backendChat/components/Chat/actions/ReopenButton.js","backendChat/components/Chat/actions/AnswerLaterButton.js","backendChat/context/SettingsContext.js","backendChat/components/Chat/actions/StandardAnswerList.js","backendChat/components/Chat/actions/index.js","backendChat/components/Chat/Form.js","backendChat/components/Chat/index.js","backendChat/components/App.js","backendChat/context/Store.js","backendChat/components/Settings.js","backendChat/index.js","index.js"],"names":["getUrlParam","parameter","vars","window","location","search","substring","split","i","length","pair","ChatContext","React","createContext","ChatReducer","state","action","type","localStorage","removeItem","clientChat","setItem","payload","questionId","ChatProvider","children","useReducer","dispatch","useEffect","data","getItem","Provider","value","CREATE_QUESTION_MUTATION","gql","Form","createQuestion","loading","nameInput","useRef","emailInput","subjectInput","disableInputs","onSubmit","event","preventDefault","agencyIdParam","agencyMailParam","urlParam","alert","variables","agencyId","agencyMail","authorName","current","authorEmail","subject","url","className","autoFocus","disabled","rows","ref","required","CreateQuestion","useContext","mutation","id","GET_QUESTION","CREATE_MESSAGE_MUTATION","backendChat","message","MAKE_HEARTBEAT_MUTATION","SettingsContext","SettingsReducer","JSON","stringify","messages","parse","standardAnswers","SettingsProvider","localStorageData","StatusBar","status","chatPending","NEW_MESSAGE","QUESTION_CLOSED_SUBSCRIPTION","QUESTION_ASSIGNED_SUBSCRIPTION","QUESTION_REOPENED_SUBSCRIPTION","convertTimestampToDate","timestamp","Date","generateDateString","date","mutatedDate","format","locale","daLocale","mutatedTime","Message","sentFrom","text","createdAt","convertedDate","useState","dateString","setDateString","timer","setInterval","clearInterval","scrollToBottom","element","scrollHeight","scrollTop","MessageList","questionCreatedAt","subscribeToMore","makeHeartbeat","document","NEW_MESSAGE_SUBSCRIPTION","updateQuery","prev","subscriptionData","newObject","Object","assign","question","newMessage","questionAssigned","questionReopened","querySelector","renderLoading","map","index","key","createMessage","setMessage","formRef","minRows","maxRows","placeholder","onChange","target","onKeyDown","keyCode","shiftKey","dispatchEvent","Event","ChatContainer","query","GET_QUESTION_QUERY","disabledStates","App","httpLink","HttpLink","uri","process","fetch","wsLink","WebSocketLink","options","reconnect","link","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","Apollo","Store","GET_SETTINGS","SettingsSetter","settings","Settings","GET_SETTINGS_QUERY","Index","GET_QUESTIONS","NEW_QUESTION","QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION","ASSIGN_QUESTION_MUTATION","calculateOffline","differenceInSeconds","QuestionTeaser","canAssign","canSetActive","heading","source","isActive","lastHeartbeat","myConsultantId","Drupal","consultantId","toString","hasUnreadMessages","setHasUnreadMessages","isOffline","offline","setOffline","truncate","AssignQuestionMutation","assignQuestion","onClick","confirm","QuestionList","title","questions","subscriptions","sort","a","b","consultant","lastHeartbeatAt","readOnly","QUESTION_HEARTBEAT_SUBSCRIPTION","AvailableQuestions","statusType","push","NEW_QUESTION_SUBSCRIPTION","newQuestion","questionToRemove","questionAssignedToConsultant","filteredQuestions","filter","questionToReadd","questionHeartbeat","currentQuestion","find","mutatedQuestion","ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION","AssignedQuestions","assignedQuestionClosed","Sidebar","OfflineMessage","ReadonlyMessage","Bar","name","email","href","submittedBy","author","consultantName","CLOSE_QUESTION_MUTATION","REOPEN_QUESTION_MUTATION","Modal","toggle","visible","CloseButton","closeQuestion","confirmText","reason","handleClick","ReopenButton","reopenQuestion","AnswerLaterButton","showOptions","setShowOptions","titleInputRef","keepConsultantRef","keepConsultant","checked","htmlFor","StandardAnswerList","modalToggle","modalVisible","renderList","keys","headingKey","items","renderItems","itemKey","focus","handleApplyStandardAnswer","Actions","showStandardAnswers","setShowStandardAnswers","showActions","setShowActions","handleToggleStandardAnswers","handleToggleActions","fetchPolicy","renderChat","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4876d190.chunk.js","sourcesContent":["const getUrlParam = parameter => {\n  const query = window.location.search.substring(1);\n  const vars = query.split('&');\n\n  for (let i = 0; i < vars.length; i++) {\n    const pair = vars[i].split('=');\n\n    if (pair[0] === parameter) {\n      return pair[1];\n    }\n  }\n\n  return '';\n};\n\nexport default getUrlParam;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('clientActiveQuestionId');\n\n      return {\n        ...state,\n        clientChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('clientActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        clientChat: {\n          questionId: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    clientChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('clientActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst CREATE_QUESTION_MUTATION = gql`\n  mutation CreateQuestionMutation(\n    $agencyId: String!\n    $agencyMail: String!\n    $authorName: String!\n    $authorEmail: String!\n    $subject: String!\n    $url: String!\n  ) {\n    createQuestion(\n      data: {\n        authorName: $authorName\n        authorEmail: $authorEmail\n        agencyMail: $agencyMail\n        agencyId: $agencyId\n        subject: $subject\n        url: $url\n      }\n    ) {\n      id\n      subject\n      authorName\n      status\n    }\n  }\n`;\n\nexport default CREATE_QUESTION_MUTATION;\n","import React, { useRef } from 'react';\n\nimport getUrlParam from '../../../shared/utils/getUrlParam';\n\nconst Form = ({ createQuestion, loading }) => {\n  const nameInput = useRef('');\n  const emailInput = useRef('');\n  const subjectInput = useRef('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const agencyIdParam = getUrlParam('agency_id');\n    const agencyMailParam = getUrlParam('agency_mail');\n    const urlParam = getUrlParam('url');\n\n    // Validate params.\n    if (!agencyIdParam || !urlParam) {\n      return alert('A needed param was not set.');\n    }\n\n    createQuestion({\n      variables: {\n        agencyId: agencyIdParam,\n        agencyMail: agencyMailParam,\n        authorName: nameInput.current.value,\n        authorEmail: emailInput.current.value,\n        subject: subjectInput.current.value,\n        url: urlParam,\n      },\n    });\n  };\n\n  const disableInputs = loading;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--question\">\n        <label>Hvad vil du spørge om?</label>\n        <div>\n          <textarea autoFocus disabled={disableInputs} rows=\"5\" ref={subjectInput} />\n        </div>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--name\">\n        <label>\n          Dit navn\n          <div>\n            <input\n              type=\"text\"\n              disabled={disableInputs}\n              ref={nameInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--email\">\n        <label>\n          Din e-mail adresse\n          <div>\n            <input\n              type=\"email\"\n              disabled={disableInputs}\n              ref={emailInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n\n      <input type=\"submit\" value=\"Spørg nu\" />\n    </form>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CREATE_QUESTION_MUTATION from '../../../shared/Apollo/mutation/createQuestion';\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\n\nimport Form from './Form';\n\nconst CreateQuestion = () => {\n  const [, dispatch] = useContext(ChatContext);\n\n  return (\n    <div className=\"question-form\">\n      <Mutation mutation={CREATE_QUESTION_MUTATION}>\n        {(createQuestion, { loading, data }) => {\n          if (data && data.createQuestion.id) {\n            dispatch({\n              type: SET_ACTIVE_CHAT,\n              payload: data.createQuestion.id,\n            });\n          }\n\n          return <Form createQuestion={createQuestion} loading={loading} />;\n        }}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateQuestion;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTION = gql`\n  query QuestionQuery($questionId: ID!) {\n    question(questionId: $questionId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default GET_QUESTION;\n","import gql from 'graphql-tag';\n\nconst CREATE_MESSAGE_MUTATION = gql`\n  mutation CreateMessageMutation($questionId: ID!, $sentFrom: String!, $text: String!) {\n    createMessage(questionId: $questionId, data: { text: $text, sentFrom: $sentFrom }) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default CREATE_MESSAGE_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\nexport const SET_CHAT_MESSAGE_TEXT = 'SET_CHAT_MESSAGE_TEXT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('backendActiveQuestionId');\n\n      return {\n        ...state,\n        backendChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('backendActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        backendChat: {\n          questionId: action.payload,\n          message: '',\n        },\n      };\n    case SET_CHAT_MESSAGE_TEXT:\n      return {\n        ...state,\n        backendChat: {\n          ...state.backendChat,\n          message: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    backendChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('backendActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst MAKE_HEARTBEAT_MUTATION = gql`\n  mutation MakeHeartbeatMutation($questionId: ID!) {\n    makeHeartbeat(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default MAKE_HEARTBEAT_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('clientSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('clientSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {});\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('clientSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { SettingsContext } from '../../context/SettingsContext';\n\nconst StatusBar = ({ status }) => {\n  const [state] = useContext(SettingsContext);\n\n  if (status === 'pending') {\n    return (\n      <div className={`client-status-bar client-status-bar--${status}`}>\n        {state.messages.chatPending}\n      </div>\n    );\n  }\n\n  return '';\n};\n\nexport default StatusBar;\n","import gql from 'graphql-tag';\n\nconst NEW_MESSAGE = gql`\n  subscription NewMessageSubscription($questionId: ID!) {\n    newMessage(questionId: $questionId) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default NEW_MESSAGE;\n","import gql from 'graphql-tag';\n\nconst QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription QuestionClosedSubscription($questionId: ID!) {\n    questionClosed(questionId: $questionId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default QUESTION_CLOSED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_SUBSCRIPTION = gql`\n  subscription QuestionAssignedSubscription($questionId: ID) {\n    questionAssigned(questionId: $questionId) {\n      status\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_REOPENED_SUBSCRIPTION = gql`\n  subscription QuestionReopenedSubscription($questionId: ID) {\n    questionReopened(questionId: $questionId) {\n      id\n      status\n      consultant\n      subject\n      authorName\n      authorEmail\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_REOPENED_SUBSCRIPTION;\n","const convertTimestampToDate = timestamp => new Date(timestamp * 1000);\n\nexport default convertTimestampToDate;\n","import daLocale from 'date-fns/locale/da';\nimport format from 'date-fns/format';\n\nconst generateDateString = date => {\n  const mutatedDate = format(date, 'DD.MM.YYYY', {\n    locale: daLocale,\n  });\n\n  const mutatedTime = format(date, 'HH:mm', {\n    locale: daLocale,\n  });\n\n  return `D. ${mutatedDate} kl. ${mutatedTime}`;\n};\n\nexport default generateDateString;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`client-message client-message--${sentFrom}`}>\n      <div className=\"client-message__box\">\n        <div className=\"client-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"client-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","const scrollToBottom = element => {\n  if (element.length === 0) {\n    return false;\n  }\n\n  const { scrollHeight } = element;\n\n  element.scrollTop = scrollHeight;\n}\n\nexport default scrollToBottom;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionClosed';\nimport QUESTION_ASSIGNED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssigned';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport { ChatContext } from '../../context/ChatContext';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  disabled,\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n  makeHeartbeat,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    // New message.\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const newObject = Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [subscriptionData.data.newMessage],\n          },\n        });\n\n        if (prev.question.messages) {\n          newObject.question.messages = [\n            ...prev.question.messages,\n            subscriptionData.data.newMessage,\n          ];\n        }\n\n        return newObject;\n      },\n    });\n\n    // Question assigned.\n    subscribeToMore({\n      document: QUESTION_ASSIGNED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionAssigned,\n          },\n        });\n      },\n    });\n\n    // Close question.\n    subscribeToMore({\n      document: QUESTION_CLOSED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        // Reset the chat.\n        dispatch({\n          type: RESET_CHAT,\n          payload: null,\n        });\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: null,\n        });\n      },\n    });\n\n    // Question repeoned.\n    subscribeToMore({\n      document: QUESTION_REOPENED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionReopened,\n          },\n        });\n      },\n    });\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Make a heartbeat every 10 seconds.\n    const timer = setInterval(() => {\n      makeHeartbeat({\n        variables: {\n          questionId: state.clientChat.questionId,\n        },\n      });\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.client-messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`client-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  const renderLoading = () => {\n    if (disabled) {\n      return (\n        <div className=\"loading\">\n          <div />\n          <div />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        disabled\n          ? 'client-messages client-messages--disabled'\n          : 'client-messages'\n      }\n    >\n      {renderLoading()}\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React, { useRef, useContext, useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext } from '../../context/ChatContext';\n\nconst Form = ({ createMessage, disabled }) => {\n  const [state] = useContext(ChatContext);\n  const [message, setMessage] = useState('');\n  const formRef = useRef();\n\n  const handleChange = event => setMessage(event.target.value);\n\n  const handleKeyDown = event => {\n\n    if (event.keyCode === 13 && !(event.keyCode === 13 && event.shiftKey)) {\n      event.preventDefault();\n\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.clientChat.questionId,\n          text: message,\n          sentFrom: 'user',\n        },\n      });\n\n      // Clear the input.\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"client-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          autoFocus\n        />\n        <input type=\"submit\" value=\"Send besked\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport { ChatContext } from '../../context/ChatContext';\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\nimport MAKE_HEARTBEAT_MUTATION from '../../../shared/Apollo/mutation/makeHeartbeat';\n\nimport StatusBar from './StatusBar';\nimport MessageList from './MessageList';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.clientChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || loading) return '';\n\n        const { status } = data.question;\n        const disabledStates = status === 'pending' || status === 'complete';\n\n        // The recieved question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"client-chat\">\n            <StatusBar status={data.question.status} />\n\n            <Mutation mutation={MAKE_HEARTBEAT_MUTATION}>\n              {makeHeartbeat => (\n                <MessageList\n                  disabled={disabledStates}\n                  subject={data.question.subject}\n                  questionCreatedAt={data.question.createdAt}\n                  messages={data.question.messages}\n                  subscribeToMore={subscribeToMore}\n                  makeHeartbeat={makeHeartbeat}\n                />\n              )}\n            </Mutation>\n\n            <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n              {createMessage => (\n                <Form disabled={disabledStates} createMessage={createMessage} />\n              )}\n            </Mutation>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Question from './Question';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  if (state.clientChat) {\n    return <Chat />;\n  }\n\n  return <Question />;\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport fetch from 'unfetch';\n\n// HTTP link.\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_APOLLO_HTTP_URI,\n  fetch: fetch,\n});\n\n// WebSocket link.\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_APOLLO_WS_URI,\n  fetch: fetch,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nconst Apollo = ({ children }) => (\n  <ApolloProvider client={client}>\n    {children}\n  </ApolloProvider>\n);\n\nexport default Apollo;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>{children}</ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import gql from 'graphql-tag';\n\nconst GET_SETTINGS = gql`\n  query {\n    settings {\n      messages\n      standardAnswers\n    }\n  }\n`;\n\nexport default GET_SETTINGS;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTIONS = gql`\n  query QuestionsQuery($statusType: String!, $consultantId: ID) {\n    questions(statusType: $statusType, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n    }\n  }\n`;\n\nexport default GET_QUESTIONS;\n","import gql from 'graphql-tag';\n\nconst NEW_QUESTION = gql`\n  subscription NewQuestionSubscription($statusType: String!) {\n    newQuestion(statusType: $statusType) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      source\n      consultant\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default NEW_QUESTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION = gql`\n  subscription QuestionAssignedToConsultantSubscription($consultantId: ID) {\n    questionAssignedToConsultant(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst ASSIGN_QUESTION_MUTATION = gql`\n  mutation AssignQuestionMutation($questionId: ID!, $consultantId: ID!) {\n    assignQuestion(questionId: $questionId, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default ASSIGN_QUESTION_MUTATION;\n","import differenceInSeconds from 'date-fns/difference_in_seconds';\nimport convertTimestampToDate from './convertTimestampToDate';\n\nconst calculateOffline = timestamp => {\n  const distanceInSeconds = 15;\n  const date = convertTimestampToDate(timestamp);\n\n  // Difference is bigger than $distance. It is seen as offline.\n  if (differenceInSeconds(new Date(), date) > distanceInSeconds) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default calculateOffline;\n","import React, { useState, useEffect, useContext } from 'react';\nimport truncate from 'voca/truncate';\nimport { Mutation } from 'react-apollo';\n\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\nimport AssignQuestionMutation from '../../../shared/Apollo/mutation/assignQuestion';\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst QuestionTeaser = ({\n  canAssign,\n  canSetActive,\n  questionId,\n  heading,\n  text,\n  source,\n  isActive,\n  createdAt,\n  lastHeartbeat,\n  subscribeToMore,\n}) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [hasUnreadMessages, setHasUnreadMessages] = useState(false);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n  const [state, dispatch] = useContext(ChatContext);\n\n  // DateString.\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  // Has unread messages.\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { newMessage } = subscriptionData.data;\n\n        // Message is sent by admin. (don't notify of own messages).\n        if (newMessage.sentFrom === 'admin') {\n          setHasUnreadMessages(false);\n\n          return prev;\n        }\n\n        // The chat is open.\n        if (state.backendChat && state.backendChat.questionId) {\n          // It's the question viewed - no need to \"new messages\" for that.\n          if (state.backendChat.questionId === newMessage.question.id) {\n            setHasUnreadMessages(false);\n\n            return prev;\n          }\n        }\n\n        setHasUnreadMessages(true);\n\n        return prev;\n      },\n    });\n    // eslint-disable-next-line\n  }, [state]);\n\n  const handleAssignQuestion = assign => {\n    if (window.confirm('Vil du overtage dette spørgsmål?')) {\n      assign({\n        variables: {\n          questionId: questionId,\n          consultantId: myConsultantId,\n        },\n      });\n    }\n  };\n\n  const handleSetActive = () => {\n    dispatch({\n      type: SET_ACTIVE_CHAT,\n      payload: questionId,\n    });\n\n    setHasUnreadMessages(false);\n  };\n\n  if (offline) {\n    heading = truncate(heading, 20) + ' (offline)';\n  } else {\n    heading = truncate(heading, 32);\n  }\n\n  return (\n    <Mutation mutation={AssignQuestionMutation}>\n      {assignQuestion => (\n        <div\n          className={`question question--teaser ${isActive && 'question--active'}`}\n          onClick={() => {\n            if (canAssign) {\n              handleAssignQuestion(assignQuestion);\n            }\n\n            if (canSetActive) {\n              handleSetActive();\n            }\n          }}\n        >\n          <div className=\"question__heading\">\n            <div className=\"question__heading__title\">{heading}</div>\n          </div>\n\n          <div className=\"question__body\">{truncate(text, 35)}</div>\n\n          <div className=\"question__source\">{truncate(source, 35)}</div>\n\n          <small className=\"question__created-at\">{dateString}</small>\n\n          {hasUnreadMessages && (\n            <small className=\"question__unread-messages\">\n              Der er ulæste beskeder\n            </small>\n          )}\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nexport default QuestionTeaser;\n","import React, { useEffect, useContext } from 'react';\n\nimport { ChatContext } from '../../context/ChatContext';\nimport QuestionTeaser from './QuestionTeaser';\n\nconst QuestionList = ({\n  canAssign,\n  canSetActive,\n  title,\n  questions,\n  subscriptions,\n  subscribeToMore,\n}) => {\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [state, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    for (let i = 0; i < subscriptions.length; i++) {\n      subscriptions[i]();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const renderQuestions = () => {\n    if (!questions || questions.length === 0) {\n      return (\n        <div className=\"backend-list__item backend-list__item--no-result\">\n          Ingen samtaler at vise.\n        </div>\n      );\n    }\n\n    return questions.sort((a, b) => (a.id > b.id) ? 1 : -1).map(question => (\n      <div\n        className={\n          myConsultantId !== question.consultant\n            ? 'backend-list__item backend-list__item--faded'\n            : 'backend-list__item'\n        }\n        key={`question-${question.id}`}\n      >\n        <QuestionTeaser\n          questionId={question.id}\n          heading={question.authorName}\n          text={question.subject}\n          createdAt={question.createdAt}\n          canAssign={canAssign}\n          canSetActive={canSetActive}\n          lastHeartbeat={question.lastHeartbeatAt}\n          readOnly={myConsultantId !== question.consultant}\n          subscribeToMore={subscribeToMore}\n          isActive={(state.backendChat && (state.backendChat.questionId === question.id))}\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"backend-list\">\n      <div className=\"backend-list__heading\">\n        <h4 className=\"backend-list__heading__title\">{title}</h4>\n      </div>\n      <div className=\"backend-list__body\">{renderQuestions()}</div>\n    </div>\n  );\n};\n\nexport default QuestionList;\n","import gql from 'graphql-tag';\n\nconst QUESTION_HEARTBEAT_SUBSCRIPTION = gql`\n  subscription QuestionHeartbeatSubscription($questionId: ID) {\n    questionHeartbeat(questionId: $questionId) {\n      id\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_HEARTBEAT_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport NEW_QUESTION_SUBSCRIPTION from '../../../shared/Apollo/subscription/newQuestion';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\n\nimport QuestionList from './QuestionList';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat';\n\nconst AvailableQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        consultantId: null,\n        statusType: 'pending',\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // New questions added.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: NEW_QUESTION_SUBSCRIPTION,\n            variables: {\n              consultantId: null,\n              statusType: 'pending',\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question = subscriptionData.data.newQuestion;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToReadd = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToReadd.id,\n              );\n\n              filteredQuestions.push(questionToReadd);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              };\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Chats, Afventer svar\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={true}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AvailableQuestions;\n","import gql from 'graphql-tag';\n\nconst ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription AssignedQuestionClosedSubscription($consultantId: ID) {\n    assignedQuestionClosed(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/assignedQuestionClosed';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat';\n\nimport QuestionList from './QuestionList';\n\nconst AssignedQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        statusType: 'assigned',\n        consultantId: null,\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question closed.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.assignedQuestionClosed;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              };\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Chats, Ved at blive besvaret\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={false}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AssignedQuestions;\n","import './index.css';\nimport React from 'react';\n\nimport AvailableQuestions from './AvailableQuestions';\nimport AssignedQuestions from './AssignedQuestions';\n\nconst Sidebar = () => (\n  <div className=\"backend-sidebar\">\n    <AvailableQuestions />\n    <AssignedQuestions />\n  </div>\n);\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\n\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst OfflineMessage = ({ lastHeartbeat }) => {\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  if (offline) {\n    return (\n      <div className=\"backend-notice backend-notice--offline\">Brugeren er offline...</div>\n    );\n  }\n\n  return <></>;\n};\n\nexport default OfflineMessage;\n","import React from 'react';\n\nconst ReadonlyMessage = () => (\n  <div className=\"backend-notice backend-notice--readonly\">\n    Du observerer en chat der er tildelt en anden bruger.\n  </div>\n);\n\nexport default ReadonlyMessage;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nconst Bar = ({ name, email, source }) => {\n  const [, dispatch] = useContext(ChatContext);\n\n  const handleCloseChat = () => {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  };\n\n  return (\n    <div className=\"backend-bar\">\n      <div className=\"backend-bar__heading\">\n        <h2>{name}</h2>\n        <h3>\n          <a href={`mailto:${email}`}>{email}</a>\n        </h3>\n        <h4>{source}</h4>\n      </div>\n\n      <div className=\"backend-bar__spacer\" />\n\n      <span\n        className=\"backend-bar__button bar__button--close\"\n        onClick={handleCloseChat}\n        title=\"Klik for at lukke\"\n      >\n        X\n      </span>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, submittedBy, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`backend-message backend-message--${sentFrom}`}>\n      <div className=\"backend-message__box\">\n        <div className=\"backend-message__text\">{text}</div>\n      </div>\n      \n      {submittedBy && (\n        <div className=\"backend-message__submitted-by\">Af {submittedBy}</div>\n      )}\n\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"backend-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport { ChatContext } from '../../context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  author,\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n}) => {\n  const [state] = useContext(ChatContext);\n  const consultantName =\n    window.Drupal &&\n      window.Drupal.settings &&\n      window.Drupal.settings.consultantName\n      ? window.Drupal.settings.consultantName.toString()\n      : 'ikke defineret';\n\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.backendChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [\n              ...prev.question.messages,\n              subscriptionData.data.newMessage,\n            ],\n          },\n        });\n      },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.backend-chat__messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => {\n      let submittedBy = '';\n\n      if (message.sentFrom === 'admin') {\n        submittedBy = consultantName;\n      }\n      else if (message.sentFrom === 'user') {\n        submittedBy = author;\n      }\n\n      return (\n        <div key={`backend-message-${index}-${message.id}`}>\n          <Message\n            submittedBy={submittedBy}\n            text={message.text}\n            createdAt={message.createdAt}\n            sentFrom={message.sentFrom}\n          />\n        </div>\n      );\n    });\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  return (\n    <div className=\"backend-chat__messages\">\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import gql from 'graphql-tag';\n\nconst CLOSE_QUESTION_MUTATION = gql`\n  mutation CloseQuestionMutation(\n    $questionId: ID!\n    $reason: String!\n    $keepConsultant: Boolean\n    $title: String\n  ) {\n    closeQuestion(\n      questionId: $questionId\n      reason: $reason\n      keepConsultant: $keepConsultant\n      title: $title\n    ) {\n      id\n      subject\n      authorName\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default CLOSE_QUESTION_MUTATION;\n","import gql from 'graphql-tag';\n\nconst REOPEN_QUESTION_MUTATION = gql`\n  mutation ReopenQuestionMutation($questionId: ID!) {\n    reopenQuestion(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default REOPEN_QUESTION_MUTATION;\n","import React from 'react';\n\nconst Modal = ({ children, title, toggle, visible }) => {\n  return (\n    <div className={`overlay ${visible ? 'overlay--visible' : ''}`}>\n      <div className=\"modal\">\n        <div className=\"modal__heading\">\n          <h1 className=\"modal__heading__title\">{title}</h1>\n        </div>\n        <div className=\"modal__body\">{children}</div>\n        <div className=\"modal__footer\">\n          <button\n            className=\"modal__footer__button\"\n            onClick={() => toggle(!visible)}\n          >\n            Luk vindue\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst CloseButton = ({\n  closeQuestion,\n  confirmText,\n  text,\n  reason,\n  data,\n  loading,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  if (!loading && data && data.closeQuestion.id) {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  }\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm(confirmText)) {\n      closeQuestion({\n        variables: {\n          reason,\n          questionId: state.backendChat.questionId,\n        },\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <button\n        className=\"backend-chat__button backend-chat__button--close-question\"\n        onClick={handleClick}\n        disabled\n      >\n        Vent venligst...\n      </button>\n    );\n  }\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--close-question\"\n      onClick={handleClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default CloseButton;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst ReopenButton = ({ reopenQuestion }) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm('Vil du genåbne dette spørgsmål?')) {\n      reopenQuestion({\n        variables: {\n          questionId: state.backendChat.questionId,\n        },\n      });\n\n      dispatch({\n        type: RESET_CHAT,\n        payload: null,\n      });\n    }\n  };\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--reopen-question\"\n      onClick={handleClick}\n    >\n      Forlad chat\n    </button>\n  );\n};\n\nexport default ReopenButton;\n","import React, { useContext, useState, useRef } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst AnswerLaterButton = ({ closeQuestion, data, loading }) => {\n  const [state, dispatch] = useContext(ChatContext);\n  const [showOptions, setShowOptions] = useState(false);\n  const titleInputRef = useRef('');\n  const keepConsultantRef = useRef('');\n\n  if (!loading && data && data.closeQuestion.id) {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  }\n\n  const showForm = event => {\n    event.preventDefault();\n\n    if (window.confirm('Vil du besvare dette spørgsmål senere?')) {\n      setShowOptions(true);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    closeQuestion({\n      variables: {\n        questionId: state.backendChat.questionId,\n        reason: 'later',\n        title: titleInputRef.current.value,\n        keepConsultant: keepConsultantRef.current.checked,\n      },\n    });\n\n    setShowOptions(false);\n  };\n\n  if (loading) {\n    return (\n      <button\n        className=\"backend-chat__button backend-chat__button--answer-later\"\n        disabled\n      >\n        Vent venligst...\n      </button>\n    );\n  }\n\n  return (\n    <div>\n      <button\n        className=\"backend-chat__button backend-chat__button--answer-later\"\n        onClick={showForm}\n      >\n        Besvar senere\n      </button>\n\n      {showOptions && (\n        <form onSubmit={handleSubmit}>\n          <div>\n            <strong>Der er behov for ekstra informationer.</strong>\n\n            <div>\n              <label htmlFor=\"title\">Titel</label>\n              <input type=\"text\" id=\"title\" ref={titleInputRef} />\n            </div>\n            <div>\n              <label htmlFor=\"keepConsultant\">\n                <input type=\"checkbox\" id=\"keepConsultant\" ref={keepConsultantRef} />\n                Jeg besvarer selv spørgsmålet\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\">Send</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default AnswerLaterButton;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('backendSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('backendSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {\n    messages: null,\n    standardAnswers: null,\n  });\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('backendSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport {\n  ChatContext,\n  SET_CHAT_MESSAGE_TEXT,\n} from '../../../context/ChatContext';\nimport { SettingsContext } from '../../../context/SettingsContext';\n\nconst StandardAnswerList = ({ modalToggle, modalVisible }) => {\n  const [state] = useContext(SettingsContext);\n  const [, dispatch] = useContext(ChatContext);\n  const standardAnswers = state.standardAnswers;\n\n  const handleApplyStandardAnswer = text => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: text,\n    });\n\n    modalToggle(!modalVisible);\n\n    // Move the focus inside the textarea.\n    const textarea = document.querySelector('.backend-form textarea');\n    textarea.focus();\n  };\n\n  const renderList = Object.keys(standardAnswers).map((headingKey, index) => {\n    const heading = headingKey;\n    const items = standardAnswers[headingKey];\n\n    const renderItems = Object.keys(items).map((itemKey, index) => {\n      const heading = itemKey;\n      const text = items[itemKey];\n\n      return (\n        <div\n          className=\"standard-answer\"\n          key={`answer-item-${itemKey}-${index}`}\n          onClick={() => handleApplyStandardAnswer(text)}\n        >\n          <div className=\"standard-answer__heading\">\n            <h4 className=\"standard-answer__heading__title\">{heading}</h4>\n          </div>\n\n          <div className=\"standard-answer__text\">{text}</div>\n        </div>\n      );\n    });\n\n    return (\n      <div\n        className=\"standard-answer-list__item\"\n        key={`answer-${headingKey}-${index}`}\n      >\n        <div className=\"standard-answer-list__item__heading\">\n          <h3 className=\"standard-answer-list__item__heading__title\">\n            {heading}\n          </h3>\n        </div>\n        <div className=\"standard-answer-list__item__content\">{renderItems}</div>\n      </div>\n    );\n  });\n\n  return <div className=\"standard-answer-list\">{renderList}</div>;\n};\n\nexport default StandardAnswerList;\n","import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CLOSE_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/closeQuestion';\nimport REOPEN_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/reopenQuestion';\n\nimport Modal from '../../Modal';\nimport CloseButton from './CloseButton';\nimport ReopenButton from './ReopenButton';\nimport AnswerLaterButton from './AnswerLaterButton';\nimport StandardAnswerList from './StandardAnswerList';\n\nconst Actions = () => {\n  const [showStandardAnswers, setShowStandardAnswers] = useState(false);\n  const [showActions, setShowActions] = useState(false);\n\n  const handleToggleStandardAnswers = visible => {\n    setShowActions(false);\n    setShowStandardAnswers(visible);\n  };\n  const handleToggleActions = visible => {\n    setShowStandardAnswers(false);\n    setShowActions(visible);\n  };\n\n  return (\n    <div className=\"backend-chat__actions\">\n      <div className=\"button-list\">\n        <div className=\"button-list__item\">\n          <Modal\n            toggle={handleToggleStandardAnswers}\n            visible={showStandardAnswers}\n            title=\"Standard svar\"\n          >\n            <StandardAnswerList\n              modalToggle={handleToggleStandardAnswers}\n              modalVisible={showStandardAnswers}\n            />\n          </Modal>\n\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleStandardAnswers(!showStandardAnswers)}\n          >\n            Standard svar\n          </button>\n        </div>\n        <div className=\"button-list__item\">\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleActions(!showActions)}\n          >\n            Afslut samtale\n          </button>\n          <Modal\n            toggle={handleToggleActions}\n            visible={showActions}\n            title=\"Afslut samtalen\"\n          >\n            <div className=\"button-list\">\n              <div className=\"button-list__item\">\n                <Mutation mutation={REOPEN_QUESTION_MUTATION}>\n                  {reopenQuestion => (\n                    <ReopenButton reopenQuestion={reopenQuestion} />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk grundet spam\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som spam?\"\n                      reason=\"spam\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk som besvaret\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som besvaret?\"\n                      reason=\"answered\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <AnswerLaterButton\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Actions;\n","import React, { useContext, useRef } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext, SET_CHAT_MESSAGE_TEXT } from '../../context/ChatContext';\n\nconst Form = ({ createMessage }) => {\n  const [state, dispatch] = useContext(ChatContext);\n  const formRef = useRef();\n\n  const handleChange = event => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: event.target.value,\n    });\n  };\n\n  const handleKeyDown = event => {\n\n    // enter (submit) - NOT when using shift.\n    if (event.keyCode === 13 && !(event.keyCode === 13 && event.shiftKey)) {\n      event.preventDefault();\n\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (state.backendChat.message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.backendChat.questionId,\n          text: state.backendChat.message,\n          sentFrom: 'admin',\n        },\n      });\n\n      // Clear the input.\n      dispatch({\n        type: SET_CHAT_MESSAGE_TEXT,\n        payload: '',\n      });\n    }\n  };\n\n  return (\n    <div className=\"backend-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={state.backendChat.message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          autoFocus\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nimport OfflineMessage from './OfflineMessage';\nimport ReadonlyMessage from './ReadonlyMessage';\nimport Bar from './Bar';\nimport MessageList from './MessageList';\nimport Actions from './actions';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      fetchPolicy=\"network-only\"\n      variables={{\n        questionId: state.backendChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || !data.question || loading) return '';\n\n        // The received question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"backend-chat\">\n            <Bar name={data.question.authorName} email={data.question.authorEmail} source={data.question.source} />\n\n            <OfflineMessage lastHeartbeat={data.question.lastHeartbeatAt} />\n\n            {data.question.consultant !== myConsultantId && <ReadonlyMessage />}\n\n            <MessageList\n              author={data.question.authorName}\n              subject={data.question.subject}\n              questionCreatedAt={data.question.createdAt}\n              messages={data.question.messages}\n              subscribeToMore={subscribeToMore}\n            />\n\n            {data.question.consultant === myConsultantId && <Actions />}\n\n            {data.question.consultant === myConsultantId && (\n              <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n                {createMessage => <Form createMessage={createMessage} />}\n              </Mutation>\n            )}\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { Fragment, useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  const renderChat = state.backendChat ? <Chat /> : '';\n\n  return (\n    <Fragment>\n      <Sidebar />\n      {renderChat}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>\n        {children}\n      </ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import 'core-js';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport getUrlParam from './shared/utils/getUrlParam';\nimport ClientChat from './clientChat';\nimport BackendChat from './backendChat';\n\n// Render only one.\nif (getUrlParam('renderOnly') !== '') {\n  if (getUrlParam('renderOnly') === 'backend') {\n    if (document.getElementById('chatty_backend')) {\n      ReactDOM.render(\n        <BackendChat />,\n        document.getElementById('chatty_backend'),\n      );\n    }\n  }\n\n  if (getUrlParam('renderOnly') === 'client') {\n    if (document.getElementById('chatty_client')) {\n      ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n    }\n  }\n} else {\n  if (document.getElementById('chatty_client')) {\n    ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n  }\n\n  if (document.getElementById('chatty_backend')) {\n    ReactDOM.render(<BackendChat />, document.getElementById('chatty_backend'));\n  }\n}\n"],"sourceRoot":""}