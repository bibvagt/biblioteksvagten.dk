{"version":3,"sources":["shared/utils/getUrlParam.js","clientChat/context/ChatContext.js","shared/Apollo/mutation/createQuestion.js","clientChat/components/Question/Form.js","clientChat/components/Question/index.js","shared/Apollo/query/getQuestion.js","shared/Apollo/mutation/createMessage.js","backendChat/context/ChatContext.js","shared/Apollo/mutation/makeHeartbeat.js","clientChat/context/SettingsContext.js","clientChat/components/Chat/StatusBar.js","shared/Apollo/subscription/newMessage.js","shared/Apollo/subscription/questionClosed.js","shared/Apollo/subscription/questionAssigned.js","shared/Apollo/subscription/questionReopened.js","shared/utils/convertTimestampToDate.js","shared/utils/generateDateString.js","clientChat/components/Chat/Message.js","shared/utils/scrollToBottom.js","clientChat/components/Chat/MessageList.js","clientChat/components/Chat/Form.js","clientChat/components/Chat/index.js","clientChat/components/App.js","shared/Apollo/index.js","clientChat/context/Store.js","shared/Apollo/query/getSettings.js","clientChat/components/Settings.js","clientChat/index.js","shared/Apollo/query/getQuestions.js","shared/Apollo/subscription/newQuestion.js","shared/Apollo/subscription/questionAssignedToConsultant.js","shared/Apollo/mutation/assignQuestion.js","shared/utils/calculateOffline.js","backendChat/components/Sidebar/QuestionTeaser.js","backendChat/components/Sidebar/QuestionList.js","shared/Apollo/subscription/questionHeartbeat.js","backendChat/components/Sidebar/AvailableQuestions.js","shared/Apollo/subscription/assignedQuestionClosed.js","backendChat/components/Sidebar/AssignedQuestions.js","backendChat/components/Sidebar/index.js","backendChat/components/Chat/OfflineMessage.js","backendChat/components/Chat/ReadonlyMessage.js","backendChat/components/Chat/Bar.js","backendChat/components/Chat/Message.js","backendChat/components/Chat/MessageList.js","shared/Apollo/mutation/closeQuestion.js","shared/Apollo/mutation/reopenQuestion.js","backendChat/components/Modal.js","backendChat/components/Chat/actions/CloseButton.js","backendChat/components/Chat/actions/ReopenButton.js","backendChat/components/Chat/actions/AnswerLaterButton.js","backendChat/context/SettingsContext.js","backendChat/components/Chat/actions/StandardAnswerList.js","backendChat/components/Chat/actions/index.js","backendChat/components/Chat/Form.js","backendChat/components/Chat/index.js","backendChat/components/App.js","backendChat/context/Store.js","backendChat/components/Settings.js","backendChat/index.js","index.js"],"names":["getUrlParam","parameter","vars","window","location","search","substring","split","i","length","pair","ChatContext","React","createContext","ChatReducer","state","action","type","localStorage","removeItem","Object","objectSpread","clientChat","setItem","payload","questionId","ChatProvider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","data","getItem","react_default","a","createElement","Provider","value","CREATE_QUESTION_MUTATION","gql","_templateObject","Form","createQuestion","loading","nameInput","useRef","emailInput","subjectInput","disableInputs","onSubmit","event","preventDefault","agencyIdParam","agencyMailParam","urlParam","alert","variables","agencyId","agencyMail","authorName","current","authorEmail","subject","url","className","disabled","rows","ref","required","CreateQuestion","_useContext","useContext","react_apollo_esm","mutation","id","Question_Form","GET_QUESTION","getQuestion_templateObject","CREATE_MESSAGE_MUTATION","createMessage_templateObject","backendChat","message","ChatContext_ChatContext","MAKE_HEARTBEAT_MUTATION","makeHeartbeat_templateObject","SettingsContext","SettingsReducer","JSON","stringify","messages","parse","standardAnswers","SettingsProvider","localStorageData","StatusBar","status","concat","chatPending","NEW_MESSAGE","newMessage_templateObject","QUESTION_CLOSED_SUBSCRIPTION","questionClosed_templateObject","QUESTION_ASSIGNED_SUBSCRIPTION","questionAssigned_templateObject","QUESTION_REOPENED_SUBSCRIPTION","questionReopened_templateObject","convertTimestampToDate","timestamp","Date","generateDateString","date","mutatedDate","format","locale","daLocale","mutatedTime","Message","sentFrom","text","createdAt","convertedDate","_useState","useState","_useState2","dateString","setDateString","timer","setInterval","clearInterval","scrollToBottom","element","scrollHeight","scrollTop","MessageList","questionCreatedAt","subscribeToMore","makeHeartbeat","_useContext2","document","NEW_MESSAGE_SUBSCRIPTION","updateQuery","prev","_ref2","subscriptionData","newObject","assign","question","newMessage","toConsumableArray","_ref3","questionAssigned","_ref4","_ref5","questionReopened","querySelector","renderLoading","Chat_Message","map","index","key","createMessage","setMessage","formRef","react_textarea_autosize_esm_browser","minRows","maxRows","placeholder","onChange","target","onKeyDown","keyCode","metaKey","ctrlKey","dispatchEvent","Event","ChatContainer","query","GET_QUESTION_QUERY","disabledStates","Chat_StatusBar","Chat_MessageList","Chat_Form","App","components_Chat","components_Question","httpLink","HttpLink","uri","process","wsLink","WebSocketLink","options","reconnect","link","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","Apollo","Store","SettingsContext_SettingsProvider","ChatContext_ChatProvider","GET_SETTINGS","getSettings_templateObject","SettingsSetter","settings","Settings","GET_SETTINGS_QUERY","Settings_SettingsSetter","Index","shared_Apollo","context_Store","components_Settings","components_App","GET_QUESTIONS","getQuestions_templateObject","NEW_QUESTION","newQuestion_templateObject","QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION","questionAssignedToConsultant_templateObject","ASSIGN_QUESTION_MUTATION","assignQuestion_templateObject","calculateOffline","differenceInSeconds","QuestionTeaser","canAssign","canSetActive","heading","source","lastHeartbeat","hasUnreadMessages","setHasUnreadMessages","_useState3","_useState4","_useState5","isOffline","_useState6","offline","setOffline","truncate","AssignQuestionMutation","assignQuestion","onClick","confirm","consultantId","QuestionList","title","questions","subscriptions","consultant","Sidebar_QuestionTeaser","lastHeartbeatAt","readOnly","QUESTION_HEARTBEAT_SUBSCRIPTION","questionHeartbeat_templateObject","AvailableQuestions","statusType","push","NEW_QUESTION_SUBSCRIPTION","newQuestion","questionToRemove","questionAssignedToConsultant","filteredQuestions","filter","questionToReadd","questionHeartbeat","currentQuestion","find","mutatedQuestion","Sidebar_QuestionList","ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION","assignedQuestionClosed_templateObject","AssignedQuestions","assignedQuestionClosed","Sidebar","Sidebar_AvailableQuestions","Sidebar_AssignedQuestions","OfflineMessage","Fragment","ReadonlyMessage","Bar","name","email","href","components_Chat_Message","CLOSE_QUESTION_MUTATION","closeQuestion_templateObject","REOPEN_QUESTION_MUTATION","reopenQuestion_templateObject","Modal","toggle","visible","CloseButton","closeQuestion","confirmText","reason","handleClick","ReopenButton","reopenQuestion","AnswerLaterButton","showOptions","setShowOptions","titleInputRef","keepConsultantRef","keepConsultant","checked","htmlFor","SettingsContext_SettingsContext","StandardAnswerList","modalToggle","modalVisible","_useContext3","renderList","keys","headingKey","items","renderItems","itemKey","handleApplyStandardAnswer","Actions","showStandardAnswers","setShowStandardAnswers","showActions","setShowActions","handleToggleStandardAnswers","handleToggleActions","components_Modal","actions_StandardAnswerList","actions_ReopenButton","actions_CloseButton","actions_AnswerLaterButton","fetchPolicy","Chat_Bar","Chat_OfflineMessage","Chat_ReadonlyMessage","components_Chat_MessageList","actions","components_Chat_Form","renderChat","src_backendChat_components_Chat","react","backendChat_components_Sidebar","context_SettingsContext_SettingsProvider","context_ChatContext_ChatProvider","components_Settings_SettingsSetter","backendChat_context_Store","backendChat_components_Settings","backendChat_components_App","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.31d9d8f6.chunk.js","sourcesContent":["const getUrlParam = parameter => {\n  const query = window.location.search.substring(1);\n  const vars = query.split('&');\n\n  for (let i = 0; i < vars.length; i++) {\n    const pair = vars[i].split('=');\n\n    if (pair[0] === parameter) {\n      return pair[1];\n    }\n  }\n\n  return '';\n};\n\nexport default getUrlParam;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('clientActiveQuestionId');\n\n      return {\n        ...state,\n        clientChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('clientActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        clientChat: {\n          questionId: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    clientChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('clientActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst CREATE_QUESTION_MUTATION = gql`\n  mutation CreateQuestionMutation(\n    $agencyId: String!\n    $agencyMail: String!\n    $authorName: String!\n    $authorEmail: String!\n    $subject: String!\n    $url: String!\n  ) {\n    createQuestion(\n      data: {\n        authorName: $authorName\n        authorEmail: $authorEmail\n        agencyMail: $agencyMail\n        agencyId: $agencyId\n        subject: $subject\n        url: $url\n      }\n    ) {\n      id\n      subject\n      authorName\n      status\n    }\n  }\n`;\n\nexport default CREATE_QUESTION_MUTATION;\n","import React, { useRef } from 'react';\n\nimport getUrlParam from '../../../shared/utils/getUrlParam';\n\nconst Form = ({ createQuestion, loading }) => {\n  const nameInput = useRef('');\n  const emailInput = useRef('');\n  const subjectInput = useRef('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const agencyIdParam = getUrlParam('agency_id');\n    const agencyMailParam = getUrlParam('agency_mail');\n    const urlParam = getUrlParam('url');\n\n    // Validate params.\n    if (!agencyIdParam || !urlParam) {\n      return alert('A needed param was not set.');\n    }\n\n    createQuestion({\n      variables: {\n        agencyId: agencyIdParam,\n        agencyMail: agencyMailParam,\n        authorName: nameInput.current.value,\n        authorEmail: emailInput.current.value,\n        subject: subjectInput.current.value,\n        url: urlParam,\n      },\n    });\n  };\n\n  const disableInputs = loading;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--question\">\n        <label>Hvad vil du spørge om?</label>\n        <div>\n          <textarea disabled={disableInputs} rows=\"5\" ref={subjectInput} />\n        </div>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--name\">\n        <label>\n          Dit navn\n          <div>\n            <input\n              type=\"text\"\n              disabled={disableInputs}\n              ref={nameInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--email\">\n        <label>\n          Din e-mail adresse\n          <div>\n            <input\n              type=\"email\"\n              disabled={disableInputs}\n              ref={emailInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n\n      <input type=\"submit\" value=\"Spørg nu\" />\n    </form>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CREATE_QUESTION_MUTATION from '../../../shared/Apollo/mutation/createQuestion';\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\n\nimport Form from './Form';\n\nconst CreateQuestion = () => {\n  const [, dispatch] = useContext(ChatContext);\n\n  return (\n    <div className=\"question-form\">\n      <Mutation mutation={CREATE_QUESTION_MUTATION}>\n        {(createQuestion, { loading, data }) => {\n          if (data && data.createQuestion.id) {\n            dispatch({\n              type: SET_ACTIVE_CHAT,\n              payload: data.createQuestion.id,\n            });\n          }\n\n          return <Form createQuestion={createQuestion} loading={loading} />;\n        }}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateQuestion;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTION = gql`\n  query QuestionQuery($questionId: ID!) {\n    question(questionId: $questionId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default GET_QUESTION;\n","import gql from 'graphql-tag';\n\nconst CREATE_MESSAGE_MUTATION = gql`\n  mutation CreateMessageMutation($questionId: ID!, $sentFrom: String!, $text: String!) {\n    createMessage(questionId: $questionId, data: { text: $text, sentFrom: $sentFrom }) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default CREATE_MESSAGE_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\nexport const SET_CHAT_MESSAGE_TEXT = 'SET_CHAT_MESSAGE_TEXT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('backendActiveQuestionId');\n\n      return {\n        ...state,\n        backendChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('backendActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        backendChat: {\n          questionId: action.payload,\n          message: '',\n        },\n      };\n    case SET_CHAT_MESSAGE_TEXT:\n      return {\n        ...state,\n        backendChat: {\n          ...state.backendChat,\n          message: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    backendChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('backendActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst MAKE_HEARTBEAT_MUTATION = gql`\n  mutation MakeHeartbeatMutation($questionId: ID!) {\n    makeHeartbeat(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default MAKE_HEARTBEAT_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('clientSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('clientSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {});\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('clientSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { SettingsContext } from '../../context/SettingsContext';\n\nconst StatusBar = ({ status }) => {\n  const [state] = useContext(SettingsContext);\n\n  if (status === 'pending') {\n    return (\n      <div className={`client-status-bar client-status-bar--${status}`}>\n        {state.messages.chatPending}\n      </div>\n    );\n  }\n\n  return '';\n};\n\nexport default StatusBar;\n","import gql from 'graphql-tag';\n\nconst NEW_MESSAGE = gql`\n  subscription NewMessageSubscription($questionId: ID!) {\n    newMessage(questionId: $questionId) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default NEW_MESSAGE;\n","import gql from 'graphql-tag';\n\nconst QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription QuestionClosedSubscription($questionId: ID!) {\n    questionClosed(questionId: $questionId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default QUESTION_CLOSED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_SUBSCRIPTION = gql`\n  subscription QuestionAssignedSubscription($questionId: ID) {\n    questionAssigned(questionId: $questionId) {\n      status\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_REOPENED_SUBSCRIPTION = gql`\n  subscription QuestionReopenedSubscription($questionId: ID) {\n    questionReopened(questionId: $questionId) {\n      id\n      status\n      consultant\n      subject\n      authorName\n      authorEmail\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_REOPENED_SUBSCRIPTION;\n","const convertTimestampToDate = timestamp => new Date(timestamp * 1000);\n\nexport default convertTimestampToDate;\n","import daLocale from 'date-fns/locale/da';\nimport format from 'date-fns/format';\n\nconst generateDateString = date => {\n  const mutatedDate = format(date, 'DD.MM.YYYY', {\n    locale: daLocale,\n  });\n\n  const mutatedTime = format(date, 'HH:mm', {\n    locale: daLocale,\n  });\n\n  return `D. ${mutatedDate} kl. ${mutatedTime}`;\n};\n\nexport default generateDateString;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`client-message client-message--${sentFrom}`}>\n      <div className=\"client-message__box\">\n        <div className=\"client-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"client-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","const scrollToBottom = element => {\n  if (element.length === 0) {\n    return false;\n  }\n\n  const { scrollHeight } = element;\n\n  element.scrollTop = scrollHeight;\n}\n\nexport default scrollToBottom;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionClosed';\nimport QUESTION_ASSIGNED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssigned';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport { ChatContext } from '../../context/ChatContext';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  disabled,\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n  makeHeartbeat,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    // New message.\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const newObject = Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [subscriptionData.data.newMessage],\n          },\n        });\n\n        if (prev.question.messages) {\n          newObject.question.messages = [\n            ...prev.question.messages,\n            subscriptionData.data.newMessage,\n          ];\n        }\n\n        return newObject;\n      },\n    });\n\n    // Question assigned.\n    subscribeToMore({\n      document: QUESTION_ASSIGNED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionAssigned,\n          },\n        });\n      },\n    });\n\n    // Close question.\n    subscribeToMore({\n      document: QUESTION_CLOSED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        // Reset the chat.\n        dispatch({\n          type: RESET_CHAT,\n          payload: null,\n        });\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: null,\n        });\n      },\n    });\n\n    // Question repeoned.\n    subscribeToMore({\n      document: QUESTION_REOPENED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionReopened,\n          },\n        });\n      },\n    });\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Make a heartbeat every 10 seconds.\n    const timer = setInterval(() => {\n      makeHeartbeat({\n        variables: {\n          questionId: state.clientChat.questionId,\n        },\n      });\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.client-messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`client-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  const renderLoading = () => {\n    if (disabled) {\n      return (\n        <div className=\"loading\">\n          <div />\n          <div />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        disabled\n          ? 'client-messages client-messages--disabled'\n          : 'client-messages'\n      }\n    >\n      {renderLoading()}\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React, { useRef, useContext, useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext } from '../../context/ChatContext';\n\nconst Form = ({ createMessage, disabled }) => {\n  const [state] = useContext(ChatContext);\n  const [message, setMessage] = useState('');\n  const formRef = useRef();\n\n  const handleChange = event => setMessage(event.target.value);\n\n  const handleKeyDown = event => {\n\n    // cmd / Windows + enter || ctrl + enter.\n    if ((event.keyCode === 13 && event.metaKey) || (event.keyCode === 13 && event.ctrlKey)) {\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.clientChat.questionId,\n          text: message,\n          sentFrom: 'user',\n        },\n      });\n\n      // Clear the input.\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"client-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport { ChatContext } from '../../context/ChatContext';\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\nimport MAKE_HEARTBEAT_MUTATION from '../../../shared/Apollo/mutation/makeHeartbeat';\n\nimport StatusBar from './StatusBar';\nimport MessageList from './MessageList';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.clientChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || loading) return '';\n\n        const { status } = data.question;\n        const disabledStates = status === 'pending' || status === 'complete';\n\n        // The recieved question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"client-chat\">\n            <StatusBar status={data.question.status} />\n\n            <Mutation mutation={MAKE_HEARTBEAT_MUTATION}>\n              {makeHeartbeat => (\n                <MessageList\n                  disabled={disabledStates}\n                  subject={data.question.subject}\n                  questionCreatedAt={data.question.createdAt}\n                  messages={data.question.messages}\n                  subscribeToMore={subscribeToMore}\n                  makeHeartbeat={makeHeartbeat}\n                />\n              )}\n            </Mutation>\n\n            <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n              {createMessage => (\n                <Form disabled={disabledStates} createMessage={createMessage} />\n              )}\n            </Mutation>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Question from './Question';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  if (state.clientChat) {\n    return <Chat />;\n  }\n\n  return <Question />;\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n// HTTP link.\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_APOLLO_HTTP_URI,\n});\n\n// WebSocket link.\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_APOLLO_WS_URI,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nconst Apollo = ({ children }) => (\n  <ApolloProvider client={client}>\n    {children}\n  </ApolloProvider>\n);\n\nexport default Apollo;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>{children}</ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import gql from 'graphql-tag';\n\nconst GET_SETTINGS = gql`\n  query {\n    settings {\n      messages\n      standardAnswers\n    }\n  }\n`;\n\nexport default GET_SETTINGS;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTIONS = gql`\n  query QuestionsQuery($statusType: String!, $consultantId: ID) {\n    questions(statusType: $statusType, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n    }\n  }\n`;\n\nexport default GET_QUESTIONS;\n","import gql from 'graphql-tag';\n\nconst NEW_QUESTION = gql`\n  subscription NewQuestionSubscription($statusType: String!) {\n    newQuestion(statusType: $statusType) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      source\n      consultant\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default NEW_QUESTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION = gql`\n  subscription QuestionAssignedToConsultantSubscription($consultantId: ID) {\n    questionAssignedToConsultant(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst ASSIGN_QUESTION_MUTATION = gql`\n  mutation AssignQuestionMutation($questionId: ID!, $consultantId: ID!) {\n    assignQuestion(questionId: $questionId, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default ASSIGN_QUESTION_MUTATION;\n","import differenceInSeconds from 'date-fns/difference_in_seconds';\nimport convertTimestampToDate from './convertTimestampToDate';\n\nconst calculateOffline = timestamp => {\n  const distanceInSeconds = 15;\n  const date = convertTimestampToDate(timestamp);\n\n  // Difference is bigger than $distance. It is seen as offline.\n  if (differenceInSeconds(new Date(), date) > distanceInSeconds) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default calculateOffline;\n","import React, { useState, useEffect, useContext } from 'react';\nimport truncate from 'voca/truncate';\nimport { Mutation } from 'react-apollo';\n\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\nimport AssignQuestionMutation from '../../../shared/Apollo/mutation/assignQuestion';\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst QuestionTeaser = ({\n  canAssign,\n  canSetActive,\n  questionId,\n  heading,\n  text,\n  source,\n  createdAt,\n  lastHeartbeat,\n  subscribeToMore,\n}) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const myConsultantId = '666';\n  const [hasUnreadMessages, setHasUnreadMessages] = useState(false);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n  const [state, dispatch] = useContext(ChatContext);\n\n  // DateString.\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  // Has unread messages.\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { newMessage } = subscriptionData.data;\n\n        // Message is sent by admin. (don't notify of own messages).\n        if (newMessage.sentFrom === 'admin') {\n          setHasUnreadMessages(false);\n\n          return prev;\n        }\n\n        // The chat is open.\n        if (state.backendChat && state.backendChat.questionId) {\n          // It's the question viewed - no need to \"new messages\" for that.\n          if (state.backendChat.questionId === newMessage.question.id) {\n            setHasUnreadMessages(false);\n\n            return prev;\n          }\n        }\n\n        setHasUnreadMessages(true);\n\n        return prev;\n      },\n    });\n  }, [state]);\n\n  const handleAssignQuestion = assign => {\n    if (window.confirm('Vil du overtage dette spørgsmål?')) {\n      assign({\n        variables: {\n          questionId: questionId,\n          consultantId: myConsultantId,\n        },\n      });\n    }\n  };\n\n  const handleSetActive = () => {\n    dispatch({\n      type: SET_ACTIVE_CHAT,\n      payload: questionId,\n    });\n\n    setHasUnreadMessages(false);\n  };\n\n  if (offline) {\n    heading = truncate(heading, 20) + ' (offline)';\n  } else {\n    heading = truncate(heading, 32);\n  }\n\n  return (\n    <Mutation mutation={AssignQuestionMutation}>\n      {assignQuestion => (\n        <div\n          className=\"question question--teaser\"\n          onClick={() => {\n            if (canAssign) {\n              handleAssignQuestion(assignQuestion);\n            }\n\n            if (canSetActive) {\n              handleSetActive();\n            }\n          }}\n        >\n          <div className=\"question__heading\">\n            <div className=\"question__heading__title\">{heading}</div>\n          </div>\n\n          <div className=\"question__body\">{truncate(text, 35)}</div>\n\n          <div className=\"question__source\">{truncate(source, 35)}</div>\n\n          <small className=\"question__created-at\">{dateString}</small>\n\n          {hasUnreadMessages && (\n            <small className=\"question__unread-messages\">\n              Der er ulæste beskeder\n            </small>\n          )}\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nexport default QuestionTeaser;\n","import React, { useEffect } from 'react';\n\nimport QuestionTeaser from './QuestionTeaser';\n\nconst QuestionList = ({\n  canAssign,\n  canSetActive,\n  title,\n  questions,\n  subscriptions,\n  subscribeToMore,\n}) => {\n  const myConsultantId = '666';\n\n  useEffect(() => {\n    for (let i = 0; i < subscriptions.length; i++) {\n      subscriptions[i]();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const renderQuestions = () => {\n    if (!questions || questions.length === 0) {\n      return (\n        <div className=\"backend-list__item backend-list__item--no-result\">\n          Ingen samtaler at vise.\n        </div>\n      );\n    }\n\n    return questions.map(question => (\n      <div\n        className={\n          myConsultantId !== question.consultant\n            ? 'backend-list__item backend-list__item--faded'\n            : 'backend-list__item'\n        }\n        key={`question-${question.id}`}\n      >\n        <QuestionTeaser\n          questionId={question.id}\n          heading={question.authorName}\n          text={question.subject}\n          createdAt={question.createdAt}\n          canAssign={canAssign}\n          canSetActive={canSetActive}\n          lastHeartbeat={question.lastHeartbeatAt}\n          readOnly={myConsultantId !== question.consultant}\n          subscribeToMore={subscribeToMore}\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"backend-list\">\n      <div className=\"backend-list__heading\">\n        <h4 className=\"backend-list__heading__title\">{title}</h4>\n      </div>\n      <div className=\"backend-list__body\">{renderQuestions()}</div>\n    </div>\n  );\n};\n\nexport default QuestionList;\n","import gql from 'graphql-tag';\n\nconst QUESTION_HEARTBEAT_SUBSCRIPTION = gql`\n  subscription QuestionHeartbeatSubscription($questionId: ID) {\n    questionHeartbeat(questionId: $questionId) {\n      id\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_HEARTBEAT_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport NEW_QUESTION_SUBSCRIPTION from '../../../shared/Apollo/subscription/newQuestion';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\n\nimport QuestionList from './QuestionList';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat'\n\nconst AvailableQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        consultantId: null,\n        statusType: 'pending',\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // New questions added.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: NEW_QUESTION_SUBSCRIPTION,\n            variables: {\n              consultantId: null,\n              statusType: 'pending',\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question = subscriptionData.data.newQuestion;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToReadd = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToReadd.id,\n              );\n\n              filteredQuestions.push(questionToReadd);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              }\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Tilgængelige spørgsmål\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={true}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AvailableQuestions;\n","import gql from 'graphql-tag';\n\nconst ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription AssignedQuestionClosedSubscription($consultantId: ID) {\n    assignedQuestionClosed(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/assignedQuestionClosed';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat';\n\nimport QuestionList from './QuestionList';\n\nconst AssignedQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        statusType: 'assigned',\n        consultantId: null,\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question closed.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.assignedQuestionClosed;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              };\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Tildelte spørgsmål\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={false}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AssignedQuestions;\n","import './index.css';\nimport React from 'react';\n\nimport AvailableQuestions from './AvailableQuestions';\nimport AssignedQuestions from './AssignedQuestions';\n\nconst Sidebar = () => (\n  <div className=\"backend-sidebar\">\n    <AvailableQuestions />\n    <AssignedQuestions />\n  </div>\n);\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\n\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst OfflineMessage = ({ lastHeartbeat }) => {\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  if (offline) {\n    return (\n      <div className=\"backend-notice backend-notice--offline\">Brugeren er offline...</div>\n    );\n  }\n\n  return <></>;\n};\n\nexport default OfflineMessage;\n","import React from 'react';\n\nconst ReadonlyMessage = () => (\n  <div className=\"backend-notice backend-notice--readonly\">\n    Du observerer en chat der er tildelt en anden bruger.\n  </div>\n);\n\nexport default ReadonlyMessage;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nconst Bar = ({ name, email, source }) => {\n  const [, dispatch] = useContext(ChatContext);\n\n  const handleCloseChat = () => {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  };\n\n  return (\n    <div className=\"backend-bar\">\n      <div className=\"backend-bar__heading\">\n        <h2>{name}</h2>\n        <h3>\n          <a href={`mailto:${email}`}>{email}</a>\n        </h3>\n        <h4>{source}</h4>\n      </div>\n\n      <div className=\"backend-bar__spacer\" />\n\n      <span\n        className=\"backend-bar__button bar__button--close\"\n        onClick={handleCloseChat}\n        title=\"Klik for at lukke\"\n      >\n        X\n      </span>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`backend-message backend-message--${sentFrom}`}>\n      <div className=\"backend-message__box\">\n        <div className=\"backend-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"backend-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport { ChatContext } from '../../context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n}) => {\n  const [state] = useContext(ChatContext);\n\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.backendChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [\n              ...prev.question.messages,\n              subscriptionData.data.newMessage,\n            ],\n          },\n        });\n      },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.backend-chat__messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`backend-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  return (\n    <div className=\"backend-chat__messages\">\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import gql from 'graphql-tag';\n\nconst CLOSE_QUESTION_MUTATION = gql`\n  mutation CloseQuestionMutation(\n    $questionId: ID!\n    $reason: String!\n    $keepConsultant: Boolean\n    $title: String\n  ) {\n    closeQuestion(\n      questionId: $questionId\n      reason: $reason\n      keepConsultant: $keepConsultant\n      title: $title\n    ) {\n      id\n      subject\n      authorName\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default CLOSE_QUESTION_MUTATION;\n","import gql from 'graphql-tag';\n\nconst REOPEN_QUESTION_MUTATION = gql`\n  mutation ReopenQuestionMutation($questionId: ID!) {\n    reopenQuestion(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default REOPEN_QUESTION_MUTATION;\n","import React from 'react';\n\nconst Modal = ({ children, title, toggle, visible }) => {\n  return (\n    <div className={`overlay ${visible ? 'overlay--visible' : ''}`}>\n      <div className=\"modal\">\n        <div className=\"modal__heading\">\n          <h1 className=\"modal__heading__title\">{title}</h1>\n        </div>\n        <div className=\"modal__body\">{children}</div>\n        <div className=\"modal__footer\">\n          <button\n            className=\"modal__footer__button\"\n            onClick={() => toggle(!visible)}\n          >\n            Luk vindue\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst CloseButton = ({\n  closeQuestion,\n  confirmText,\n  text,\n  reason,\n  data,\n  loading,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  if (!loading && data && data.closeQuestion.id) {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  }\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm(confirmText)) {\n      closeQuestion({\n        variables: {\n          reason,\n          questionId: state.backendChat.questionId,\n        },\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <button\n        className=\"backend-chat__button backend-chat__button--close-question\"\n        onClick={handleClick}\n        disabled\n      >\n        Vent venligst...\n      </button>\n    );\n  }\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--close-question\"\n      onClick={handleClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default CloseButton;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst ReopenButton = ({ reopenQuestion }) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm('Vil du genåbne dette spørgsmål?')) {\n      reopenQuestion({\n        variables: {\n          questionId: state.backendChat.questionId,\n        },\n      });\n\n      dispatch({\n        type: RESET_CHAT,\n        payload: null,\n      });\n    }\n  };\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--reopen-question\"\n      onClick={handleClick}\n    >\n      Genåbn spørgsmål\n    </button>\n  );\n};\n\nexport default ReopenButton;\n","import React, { useContext, useState, useRef } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst AnswerLaterButton = ({ closeQuestion, data, loading }) => {\n  const [state, dispatch] = useContext(ChatContext);\n  const [showOptions, setShowOptions] = useState(false);\n  const titleInputRef = useRef('');\n  const keepConsultantRef = useRef('');\n\n  if (!loading && data && data.closeQuestion.id) {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  }\n\n  const showForm = event => {\n    event.preventDefault();\n\n    if (window.confirm('Vil du genåbne dette spørgsmål?')) {\n      setShowOptions(true);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    closeQuestion({\n      variables: {\n        questionId: state.backendChat.questionId,\n        reason: 'later',\n        title: titleInputRef.current.value,\n        keepConsultant: keepConsultantRef.current.checked,\n      },\n    });\n\n    setShowOptions(false);\n  };\n\n  if (loading) {\n    return (\n      <button\n        className=\"backend-chat__button backend-chat__button--answer-later\"\n        disabled\n      >\n        Vent venligst...\n      </button>\n    );\n  }\n\n  return (\n    <div>\n      <button\n        className=\"backend-chat__button backend-chat__button--answer-later\"\n        onClick={showForm}\n      >\n        Besvar senere\n      </button>\n\n      {showOptions && (\n        <form onSubmit={handleSubmit}>\n          <div>\n            <strong>Der er behov for ekstra informationer.</strong>\n\n            <div>\n              <label htmlFor=\"title\">Titel</label>\n              <input type=\"text\" id=\"title\" ref={titleInputRef} />\n            </div>\n            <div>\n              <label htmlFor=\"keepConsultant\">\n                <input type=\"checkbox\" id=\"keepConsultant\" ref={keepConsultantRef} />\n                Jeg besvarer selv spørgsmålet\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\">Send</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default AnswerLaterButton;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('backendSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('backendSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {\n    messages: null,\n    standardAnswers: null,\n  });\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('backendSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport {\n  ChatContext,\n  SET_CHAT_MESSAGE_TEXT,\n} from '../../../context/ChatContext';\nimport { SettingsContext } from '../../../context/SettingsContext';\n\nconst StandardAnswerList = ({ modalToggle, modalVisible }) => {\n  const [state] = useContext(SettingsContext);\n  const [, dispatch] = useContext(ChatContext);\n  const standardAnswers = state.standardAnswers;\n\n  const handleApplyStandardAnswer = text => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: text,\n    });\n\n    modalToggle(!modalVisible);\n  };\n\n  const renderList = Object.keys(standardAnswers).map((headingKey, index) => {\n    const heading = headingKey;\n    const items = standardAnswers[headingKey];\n\n    const renderItems = Object.keys(items).map((itemKey, index) => {\n      const heading = itemKey;\n      const text = items[itemKey];\n\n      return (\n        <div\n          className=\"standard-answer\"\n          key={`answer-item-${itemKey}-${index}`}\n          onClick={() => handleApplyStandardAnswer(text)}\n        >\n          <div className=\"standard-answer__heading\">\n            <h4 className=\"standard-answer__heading__title\">{heading}</h4>\n          </div>\n\n          <div className=\"standard-answer__text\">{text}</div>\n        </div>\n      );\n    });\n\n    return (\n      <div\n        className=\"standard-answer-list__item\"\n        key={`answer-${headingKey}-${index}`}\n      >\n        <div className=\"standard-answer-list__item__heading\">\n          <h3 className=\"standard-answer-list__item__heading__title\">\n            {heading}\n          </h3>\n        </div>\n        <div className=\"standard-answer-list__item__content\">{renderItems}</div>\n      </div>\n    );\n  });\n\n  return <div className=\"standard-answer-list\">{renderList}</div>;\n};\n\nexport default StandardAnswerList;\n","import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CLOSE_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/closeQuestion';\nimport REOPEN_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/reopenQuestion';\n\nimport Modal from '../../Modal';\nimport CloseButton from './CloseButton';\nimport ReopenButton from './ReopenButton';\nimport AnswerLaterButton from './AnswerLaterButton';\nimport StandardAnswerList from './StandardAnswerList';\n\nconst Actions = () => {\n  const [showStandardAnswers, setShowStandardAnswers] = useState(false);\n  const [showActions, setShowActions] = useState(false);\n\n  const handleToggleStandardAnswers = visible => {\n    setShowActions(false);\n    setShowStandardAnswers(visible);\n  };\n  const handleToggleActions = visible => {\n    setShowStandardAnswers(false);\n    setShowActions(visible);\n  };\n\n  return (\n    <div className=\"backend-chat__actions\">\n      <div className=\"button-list\">\n        <div className=\"button-list__item\">\n          <Modal\n            toggle={handleToggleStandardAnswers}\n            visible={showStandardAnswers}\n            title=\"Standard svar\"\n          >\n            <StandardAnswerList\n              modalToggle={handleToggleStandardAnswers}\n              modalVisible={showStandardAnswers}\n            />\n          </Modal>\n\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleStandardAnswers(!showStandardAnswers)}\n          >\n            Standard svar\n          </button>\n        </div>\n        <div className=\"button-list__item\">\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleActions(!showActions)}\n          >\n            Afslut samtale\n          </button>\n          <Modal\n            toggle={handleToggleActions}\n            visible={showActions}\n            title=\"Afslut samtalen\"\n          >\n            <div className=\"button-list\">\n              <div className=\"button-list__item\">\n                <Mutation mutation={REOPEN_QUESTION_MUTATION}>\n                  {reopenQuestion => (\n                    <ReopenButton reopenQuestion={reopenQuestion} />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk grundet spam\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som spam?\"\n                      reason=\"spam\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk som besvaret\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som besvaret?\"\n                      reason=\"answered\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <AnswerLaterButton\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Actions;\n","import React, { useContext, useRef } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext, SET_CHAT_MESSAGE_TEXT } from '../../context/ChatContext';\n\nconst Form = ({ createMessage }) => {\n  const [state, dispatch] = useContext(ChatContext);\n  const formRef = useRef();\n\n  const handleChange = event => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: event.target.value,\n    });\n  };\n\n  const handleKeyDown = event => {\n\n    // cmd / Windows + enter || ctrl + enter.\n    if ((event.keyCode === 13 && event.metaKey) || (event.keyCode === 13 && event.ctrlKey)) {\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (state.backendChat.message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.backendChat.questionId,\n          text: state.backendChat.message,\n          sentFrom: 'admin',\n        },\n      });\n\n      // Clear the input.\n      dispatch({\n        type: SET_CHAT_MESSAGE_TEXT,\n        payload: '',\n      });\n    }\n  };\n\n  return (\n    <div className=\"backend-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={state.backendChat.message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nimport OfflineMessage from './OfflineMessage';\nimport ReadonlyMessage from './ReadonlyMessage';\nimport Bar from './Bar';\nimport MessageList from './MessageList';\nimport Actions from './actions';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const myConsultantId = '666';\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      fetchPolicy=\"network-only\"\n      variables={{\n        questionId: state.backendChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || !data.question || loading) return '';\n\n        // The received question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"backend-chat\">\n            <Bar name={data.question.authorName} email={data.question.authorEmail} source={data.question.source} />\n\n            <OfflineMessage lastHeartbeat={data.question.lastHeartbeatAt} />\n\n            {data.question.consultant !== myConsultantId && <ReadonlyMessage />}\n\n            <MessageList\n              subject={data.question.subject}\n              questionCreatedAt={data.question.createdAt}\n              messages={data.question.messages}\n              subscribeToMore={subscribeToMore}\n            />\n\n            {data.question.consultant === myConsultantId && <Actions />}\n\n            {data.question.consultant === myConsultantId && (\n              <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n                {createMessage => <Form createMessage={createMessage} />}\n              </Mutation>\n            )}\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { Fragment, useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  const renderChat = state.backendChat ? <Chat /> : '';\n\n  return (\n    <Fragment>\n      <Sidebar />\n      {renderChat}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>\n        {children}\n      </ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport getUrlParam from './shared/utils/getUrlParam';\nimport ClientChat from './clientChat';\nimport BackendChat from './backendChat';\n\n// Render only one.\nif (getUrlParam('renderOnly') !== '') {\n  if (getUrlParam('renderOnly') === 'backend') {\n    if (document.getElementById('chatty_backend')) {\n      ReactDOM.render(\n        <BackendChat />,\n        document.getElementById('chatty_backend'),\n      );\n    }\n  }\n\n  if (getUrlParam('renderOnly') === 'client') {\n    if (document.getElementById('chatty_client')) {\n      ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n    }\n  }\n} else {\n  if (document.getElementById('chatty_client')) {\n    ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n  }\n\n  if (document.getElementById('chatty_backend')) {\n    ReactDOM.render(<BackendChat />, document.getElementById('chatty_backend'));\n  }\n}\n"],"sourceRoot":""}