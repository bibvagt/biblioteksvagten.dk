{"version":3,"sources":["clientChat/context/ChatContext.js","shared/Apollo/mutation/createQuestion.js","clientChat/components/Question/Form.js","clientChat/components/Question/index.js","shared/Apollo/query/getQuestion.js","shared/Apollo/mutation/createMessage.js","backendChat/context/ChatContext.js","clientChat/context/SettingsContext.js","clientChat/components/Chat/StatusBar.js","shared/Apollo/subscription/newMessage.js","shared/Apollo/subscription/questionClosed.js","shared/Apollo/subscription/questionAssigned.js","shared/Apollo/subscription/questionReopened.js","shared/utils/convertTimestampToDate.js","shared/utils/generateDateString.js","clientChat/components/Chat/Message.js","shared/utils/scrollToBottom.js","clientChat/components/Chat/MessageList.js","clientChat/components/Chat/Form.js","clientChat/components/Chat/index.js","clientChat/components/App.js","shared/Apollo/index.js","clientChat/context/Store.js","shared/Apollo/query/getSettings.js","clientChat/components/Settings.js","clientChat/index.js","shared/Apollo/query/getQuestions.js","shared/Apollo/subscription/newQuestion.js","shared/Apollo/subscription/questionAssignedToConsultant.js","shared/Apollo/mutation/assignQuestion.js","backendChat/components/Sidebar/QuestionTeaser.js","backendChat/components/Sidebar/QuestionList.js","backendChat/components/Sidebar/AvailableQuestions.js","shared/Apollo/subscription/assignedQuestionClosed.js","backendChat/components/Sidebar/AssignedQuestions.js","backendChat/components/Sidebar/index.js","backendChat/components/Chat/Bar.js","backendChat/components/Chat/Message.js","backendChat/components/Chat/MessageList.js","shared/Apollo/mutation/closeQuestion.js","shared/Apollo/mutation/reopenQuestion.js","backendChat/components/Modal.js","backendChat/components/Chat/actions/CloseButton.js","backendChat/components/Chat/actions/ReopenButton.js","backendChat/context/SettingsContext.js","backendChat/components/Chat/actions/StandardAnswerList.js","backendChat/components/Chat/actions/index.js","backendChat/components/Chat/Form.js","backendChat/components/Chat/index.js","backendChat/components/App.js","backendChat/context/Store.js","backendChat/components/Settings.js","backendChat/index.js","index.js"],"names":["ChatContext","React","createContext","ChatReducer","state","action","type","localStorage","removeItem","Object","objectSpread","clientChat","setItem","payload","questionId","ChatProvider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","data","getItem","react_default","a","createElement","Provider","value","CREATE_QUESTION_MUTATION","gql","_templateObject","Form","createQuestion","loading","nameInput","useRef","emailInput","subjectInput","disableInputs","onSubmit","event","preventDefault","variables","authorName","current","authorEmail","subject","className","disabled","rows","ref","required","CreateQuestion","_useContext","useContext","react_apollo_esm","mutation","id","Question_Form","GET_QUESTION","getQuestion_templateObject","CREATE_MESSAGE_MUTATION","createMessage_templateObject","backendChat","message","ChatContext_ChatContext","SettingsContext","SettingsReducer","JSON","stringify","messages","parse","standardAnswers","SettingsProvider","localStorageData","StatusBar","status","concat","chatPending","NEW_MESSAGE","newMessage_templateObject","QUESTION_CLOSED_SUBSCRIPTION","questionClosed_templateObject","QUESTION_ASSIGNED_SUBSCRIPTION","questionAssigned_templateObject","QUESTION_REOPENED_SUBSCRIPTION","questionReopened_templateObject","convertTimestampToDate","timestamp","Date","generateDateString","date","mutatedDate","distanceInWordsToNow","locale","daLocale","Message","sentFrom","text","createdAt","convertedDate","_useState","useState","_useState2","dateString","setDateString","timer","setInterval","clearInterval","scrollToBottom","element","length","scrollHeight","scrollTop","MessageList","questionCreatedAt","subscribeToMore","_useContext2","document","NEW_MESSAGE_SUBSCRIPTION","updateQuery","prev","_ref2","subscriptionData","newObject","assign","question","newMessage","toConsumableArray","_ref3","questionAssigned","_ref4","_ref5","questionReopened","querySelector","renderLoading","Chat_Message","map","index","key","createMessage","messageInput","placeholder","ChatContainer","query","GET_QUESTION_QUERY","disabledStates","Chat_StatusBar","Chat_MessageList","Chat_Form","App","components_Chat","components_Question","httpLink","HttpLink","uri","process","wsLink","WebSocketLink","options","reconnect","link","split","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","Apollo","Store","SettingsContext_SettingsProvider","ChatContext_ChatProvider","GET_SETTINGS","getSettings_templateObject","SettingsSetter","settings","Settings","GET_SETTINGS_QUERY","Settings_SettingsSetter","Index","shared_Apollo","context_Store","components_Settings","components_App","GET_QUESTIONS","getQuestions_templateObject","NEW_QUESTION","newQuestion_templateObject","QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION","questionAssignedToConsultant_templateObject","ASSIGN_QUESTION_MUTATION","assignQuestion_templateObject","QuestionTeaser","canAssign","canSetActive","heading","AssignQuestionMutation","assignQuestion","onClick","window","confirm","consultantId","truncate","QuestionList","title","questions","subscriptions","i","Sidebar_QuestionTeaser","AvailableQuestions","statusType","push","NEW_QUESTION_SUBSCRIPTION","newQuestion","questionToRemove","questionAssignedToConsultant","filteredQuestions","filter","questionToReadd","Sidebar_QuestionList","ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION","assignedQuestionClosed_templateObject","AssignedQuestions","assignedQuestionClosed","Sidebar","Sidebar_AvailableQuestions","Sidebar_AssignedQuestions","Bar","components_Chat_Message","CLOSE_QUESTION_MUTATION","closeQuestion_templateObject","REOPEN_QUESTION_MUTATION","reopenQuestion_templateObject","Modal","toggle","visible","CloseButton","closeQuestion","confirmText","reason","handleClick","ReopenButton","reopenQuestion","SettingsContext_SettingsContext","StandardAnswerList","modalToggle","modalVisible","_useContext3","renderList","keys","headingKey","items","renderItems","itemKey","handleApplyStandardAnswer","Actions","showStandardAnswers","setShowStandardAnswers","_useState3","_useState4","showActions","setShowActions","handleToggleStandardAnswers","handleToggleActions","components_Modal","actions_StandardAnswerList","actions_ReopenButton","actions_CloseButton","onChange","target","Chat_Bar","components_Chat_MessageList","actions","components_Chat_Form","renderChat","src_backendChat_components_Chat","react","backendChat_components_Sidebar","context_SettingsContext_SettingsProvider","context_ChatContext_ChatProvider","components_Settings_SettingsSetter","backendChat_context_Store","backendChat_components_Settings","backendChat_components_App","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c07d6fc8.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('clientActiveQuestionId');\n\n      return {\n        ...state,\n        clientChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('clientActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        clientChat: {\n          questionId: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    clientChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('clientActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst CREATE_QUESTION_MUTATION = gql`\n  mutation CreateQuestionMutation($subject: String!, $authorName: String!, $authorEmail: String!) {\n    createQuestion(data: { \n      subject: $subject\n      authorName: $authorName\n      authorEmail: $authorEmail\n    }) {\n      id\n      subject\n      authorName\n      status\n    }\n  }\n`;\n\nexport default CREATE_QUESTION_MUTATION;\n","import React, { useRef } from 'react';\n\nconst Form = ({ createQuestion, loading }) => {\n  const nameInput = useRef('');\n  const emailInput = useRef('');\n  const subjectInput = useRef('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    createQuestion({\n      variables: {\n        authorName: nameInput.current.value,\n        authorEmail: emailInput.current.value,\n        subject: subjectInput.current.value,\n      },\n    });\n\n    // Set form question ID state.\n  };\n\n  const disableInputs = loading;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--question\">\n        <label>\n          Hvad vil du spørge om?\n        </label>\n        <div>\n            <textarea\n              disabled={disableInputs}\n              rows=\"5\"\n              ref={subjectInput}\n            />\n        </div>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--name\">\n        <label>\n          Dit navn\n          <div>\n            <input\n              type=\"text\"\n              disabled={disableInputs}\n              ref={nameInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--email\">\n        <label>\n          Din e-mail adresse\n          <div>\n            <input\n              type=\"email\"\n              disabled={disableInputs}\n              ref={emailInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n\n      <input type=\"submit\" value=\"Spørg nu\" />\n    </form>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CREATE_QUESTION_MUTATION from '../../../shared/Apollo/mutation/createQuestion';\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\n\nimport Form from './Form';\n\nconst CreateQuestion = () => {\n  const [, dispatch] = useContext(ChatContext);\n\n  return (\n    <div className=\"question-form\">\n      <Mutation mutation={CREATE_QUESTION_MUTATION}>\n        {(createQuestion, { loading, data }) => {\n          if (data && data.createQuestion.id) {\n            dispatch({\n              type: SET_ACTIVE_CHAT,\n              payload: data.createQuestion.id,\n            });\n          }\n\n          return <Form createQuestion={createQuestion} loading={loading} />;\n        }}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateQuestion;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTION = gql`\n  query QuestionQuery($questionId: ID!) {\n    question(questionId: $questionId) {\n      id\n      authorName\n      subject\n      createdAt\n      status\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default GET_QUESTION;\n","import gql from 'graphql-tag';\n\nconst CREATE_MESSAGE_MUTATION = gql`\n  mutation CreateMessageMutation($questionId: ID!, $sentFrom: String!, $text: String!) {\n    createMessage(questionId: $questionId, data: { text: $text, sentFrom: $sentFrom }) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        authorName\n      }\n    }\n  }\n`;\n\nexport default CREATE_MESSAGE_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\nexport const SET_CHAT_MESSAGE_TEXT = 'SET_CHAT_MESSAGE_TEXT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('backendActiveQuestionId');\n\n      return {\n        ...state,\n        backendChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('backendActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        backendChat: {\n          questionId: action.payload,\n          message: '',\n        },\n      };\n    case SET_CHAT_MESSAGE_TEXT:\n      return {\n        ...state,\n        backendChat: {\n          ...state.backendChat,\n          message: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    backendChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('backendActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('clientSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('clientSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {});\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('clientSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { SettingsContext } from '../../context/SettingsContext';\n\nconst StatusBar = ({ status }) => {\n  const [state] = useContext(SettingsContext);\n\n  if (status === 'pending') {\n    return (\n      <div className={`client-status-bar client-status-bar--${status}`}>\n        {state.messages.chatPending}\n      </div>\n    );\n  }\n\n  return '';\n};\n\nexport default StatusBar;\n","import gql from 'graphql-tag';\n\nconst NEW_MESSAGE = gql`\n  subscription NewMessageSubscription($questionId: ID!) {\n    newMessage(questionId: $questionId) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        authorName\n      }\n    }\n  }\n`;\n\nexport default NEW_MESSAGE;\n","import gql from 'graphql-tag';\n\nconst QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription QuestionClosedSubscription($questionId: ID!) {\n    questionClosed(questionId: $questionId) {\n      id\n      subject\n      authorName\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default QUESTION_CLOSED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_SUBSCRIPTION = gql`\n  subscription QuestionAssignedSubscription($questionId: ID) {\n    questionAssigned(questionId: $questionId) {\n      status\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_REOPENED_SUBSCRIPTION = gql`\n  subscription QuestionReopenedSubscription($questionId: ID) {\n    questionReopened(questionId: $questionId) {\n      id\n      status\n      consultant\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default QUESTION_REOPENED_SUBSCRIPTION;\n","const convertTimestampToDate = timestamp => new Date(timestamp * 1000);\n\nexport default convertTimestampToDate;\n","import daLocale from 'date-fns/locale/da';\nimport distanceInWordsToNow from 'date-fns/distance_in_words_to_now';\n\nconst generateDateString = date => {\n  const mutatedDate = distanceInWordsToNow(date, {\n    locale: daLocale,\n  });\n\n  return `For ${mutatedDate} siden`;\n};\n\nexport default generateDateString;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`client-message client-message--${sentFrom}`}>\n      <div className=\"client-message__box\">\n        <div className=\"client-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"client-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","const scrollToBottom = element => {\n  if (element.length === 0) {\n    return false;\n  }\n\n  const { scrollHeight } = element;\n\n  element.scrollTop = scrollHeight;\n}\n\nexport default scrollToBottom;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionClosed';\nimport QUESTION_ASSIGNED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssigned';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport { ChatContext } from '../../context/ChatContext';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  disabled,\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    // New message.\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const newObject = Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [\n              subscriptionData.data.newMessage,\n            ],\n          },\n        });\n\n        if (prev.question.messages) {\n          newObject.question.messages = [\n            ...prev.question.messages,\n            subscriptionData.data.newMessage,\n          ];\n        }\n\n        return newObject;\n      },\n    });\n\n    // Question assigned.\n    subscribeToMore({\n      document: QUESTION_ASSIGNED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionAssigned,\n          },\n        });\n      },\n    });\n\n    // Close question.\n    subscribeToMore({\n      document: QUESTION_CLOSED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        // Reset the chat.\n        dispatch({\n          type: RESET_CHAT,\n          payload: null,\n        });\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: null,\n        });\n      },\n    });\n\n    // Question repeoned.\n    subscribeToMore({\n      document: QUESTION_REOPENED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionReopened,\n          },\n        });\n      },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.client-messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`client-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  const renderLoading = () => {\n    if (disabled) {\n      return (\n        <div className=\"loading\">\n          <div />\n          <div />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        disabled\n          ? 'client-messages client-messages--disabled'\n          : 'client-messages'\n      }\n    >\n      {renderLoading()}\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React, { useRef, useContext } from 'react';\n\nimport { ChatContext } from '../../context/ChatContext';\n\nconst Form = ({ createMessage, disabled }) => {\n  const [state] = useContext(ChatContext);\n  const messageInput = useRef(null);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    createMessage({\n      variables: {\n        questionId: state.clientChat.questionId,\n        text: messageInput.current.value,\n        sentFrom: 'user',\n      },\n    });\n\n    messageInput.current.value = '';\n  };\n\n  return (\n    <div className=\"client-form\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Skriv en besked ...\"\n          required={true}\n          ref={messageInput}\n          disabled={disabled}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { ChatContext } from '../../context/ChatContext';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\n\nimport StatusBar from './StatusBar';\nimport MessageList from './MessageList';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.clientChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || loading) return '';\n\n        const { status } = data.question;\n        const disabledStates = status === 'pending' || status === 'complete';\n\n        // The recieved question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"client-chat\">\n            <StatusBar status={data.question.status} />\n\n            <MessageList\n              disabled={disabledStates}\n              subject={data.question.subject}\n              questionCreatedAt={data.question.createdAt}\n              messages={data.question.messages}\n              subscribeToMore={subscribeToMore}\n            />\n\n            <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n              {createMessage => (\n                <Form disabled={disabledStates} createMessage={createMessage} />\n              )}\n            </Mutation>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Question from './Question';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  if (state.clientChat) {\n    return <Chat />;\n  }\n\n  return <Question />;\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\n\n// HTTP link.\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_APOLLO_HTTP_URI,\n});\n\n// WebSocket link.\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_APOLLO_WS_URI,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nconst Apollo = ({ children }) => (\n  <ApolloProvider client={client}>\n    {children}\n  </ApolloProvider>\n);\n\nexport default Apollo;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>{children}</ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import gql from 'graphql-tag';\n\nconst GET_SETTINGS = gql`\n  query {\n    settings {\n      messages\n      standardAnswers\n    }\n  }\n`;\n\nexport default GET_SETTINGS;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTIONS = gql`\n  query QuestionsQuery($statusType: String!, $consultantId: ID) {\n    questions(statusType: $statusType, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default GET_QUESTIONS;\n","import gql from 'graphql-tag';\n\nconst NEW_QUESTION = gql`\n  subscription NewQuestionSubscription($statusType: String!) {\n    newQuestion(statusType: $statusType) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default NEW_QUESTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION = gql`\n  subscription QuestionAssignedToConsultantSubscription($consultantId: ID) {\n    questionAssignedToConsultant(consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst ASSIGN_QUESTION_MUTATION = gql`\n  mutation AssignQuestionMutation($questionId: ID!, $consultantId: ID!) {\n    assignQuestion(questionId: $questionId, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default ASSIGN_QUESTION_MUTATION;\n","import React, { useState, useEffect, useContext } from 'react';\nimport truncate from 'voca/truncate';\nimport { Mutation } from 'react-apollo';\n\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\nimport AssignQuestionMutation from '../../../shared/Apollo/mutation/assignQuestion';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst QuestionTeaser = ({\n  canAssign,\n  canSetActive,\n  questionId,\n  heading,\n  text,\n  createdAt,\n}) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const myConsultantId = '666';\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n  const [, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  const handleAssignQuestion = assign => {\n    if (window.confirm('Vil du overtage dette spørgsmål?')) {\n      assign({\n        variables: {\n          questionId: questionId,\n          consultantId: myConsultantId,\n        },\n      });\n    }\n  };\n\n  const handleSetActive = () => {\n    dispatch({\n      type: SET_ACTIVE_CHAT,\n      payload: questionId,\n    });\n  };\n\n  return (\n    <Mutation mutation={AssignQuestionMutation}>\n      {assignQuestion => (\n        <div\n          className=\"question question--teaser\"\n          onClick={() => {\n            if (canAssign) {\n              handleAssignQuestion(assignQuestion);\n            }\n\n            if (canSetActive) {\n              handleSetActive();\n            }\n          }}\n        >\n          <div className=\"question__heading\">\n            <div className=\"question__heading__title\">\n              {truncate(heading, 32)}\n            </div>\n          </div>\n\n          <div className=\"question__body\">{truncate(text, 35)}</div>\n\n          <small className=\"question__created-at\">{dateString}</small>\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nexport default QuestionTeaser;\n","import React, { useEffect } from 'react';\n\nimport QuestionTeaser from './QuestionTeaser';\n\nconst QuestionList = ({\n  canAssign,\n  canSetActive,\n  title,\n  questions,\n  subscriptions,\n}) => {\n  useEffect(() => {\n    for (let i = 0; i < subscriptions.length; i++) {\n      subscriptions[i]();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const renderQuestions = () => {\n    if (questions.length === 0) {\n      return (\n        <div className=\"backend-list__item backend-list__item--no-result\">\n          Ingen samtaler at vise.\n        </div>\n      );\n    }\n\n    return questions.map(question => (\n      <div className=\"backend-list__item\" key={`question-${question.id}`}>\n        <QuestionTeaser\n          questionId={question.id}\n          heading={question.authorName}\n          text={question.subject}\n          createdAt={question.createdAt}\n          canAssign={canAssign}\n          canSetActive={canSetActive}\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"backend-list\">\n      <div className=\"backend-list__heading\">\n        <h4 className=\"backend-list__heading__title\">{title}</h4>\n      </div>\n      <div className=\"backend-list__body\">{renderQuestions()}</div>\n    </div>\n  );\n};\n\nexport default QuestionList;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport NEW_QUESTION_SUBSCRIPTION from '../../../shared/Apollo/subscription/newQuestion';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\n\nimport QuestionList from './QuestionList';\n\nconst AvailableQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        consultantId: null,\n        statusType: 'pending',\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // New questions added.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: NEW_QUESTION_SUBSCRIPTION,\n            variables: {\n              consultantId: null,\n              statusType: 'pending',\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question = subscriptionData.data.newQuestion;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToReadd = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToReadd.id,\n              );\n\n              filteredQuestions.push(questionToReadd);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Tilgængelige spørgsmål\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            canAssign={true}\n            canSetActive={false}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AvailableQuestions;\n","import gql from 'graphql-tag';\n\nconst ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription AssignedQuestionClosedSubscription($consultantId: ID!) {\n    assignedQuestionClosed(consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/assignedQuestionClosed';\n\nimport QuestionList from './QuestionList';\n\nconst AssignedQuestions = () => {\n  let subscriptions = [];\n  const myConsultantId = '666';\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        statusType: 'assigned',\n        consultantId: myConsultantId,\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            variables: {\n              consultantId: myConsultantId,\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question closed.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION,\n            variables: {\n              consultantId: myConsultantId,\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.assignedQuestionClosed;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Tildelte spørgsmål\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            canAssign={false}\n            canSetActive={true}\n            subscribeToMore={subscribeToMore}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AssignedQuestions;\n","import './index.css';\nimport React from 'react';\n\nimport AvailableQuestions from './AvailableQuestions';\nimport AssignedQuestions from './AssignedQuestions';\n\nconst Sidebar = () => (\n  <div className=\"backend-sidebar\">\n    <AvailableQuestions />\n    <AssignedQuestions />\n  </div>\n);\n\nexport default Sidebar;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nconst Bar = ({ title }) => {\n  const [, dispatch] = useContext(ChatContext);\n\n  const handleCloseChat = () => {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  };\n\n  return (\n    <div className=\"backend-bar\">\n      <div className=\"backend-bar__heading\">\n        <h4 className=\"backend-bar__heading__title\">{title}</h4>\n      </div>\n\n      <div className=\"backend-bar__spacer\" />\n\n      <span\n        className=\"backend-bar__button bar__button--close\"\n        onClick={handleCloseChat}\n        title=\"Klik for at lukke\"\n      >\n        X\n      </span>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`backend-message backend-message--${sentFrom}`}>\n      <div className=\"backend-message__box\">\n        <div className=\"backend-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"backend-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport { ChatContext } from '../../context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n}) => {\n  const [state] = useContext(ChatContext);\n\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.backendChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [\n              ...prev.question.messages,\n              subscriptionData.data.newMessage,\n            ],\n          },\n        });\n      },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.backend-chat__messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`backend-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  return (\n    <div className=\"backend-chat__messages\">\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import gql from 'graphql-tag';\n\nconst CLOSE_QUESTION_MUTATION = gql`\n  mutation CloseQuestionMutation($questionId: ID!, $reason: String!) {\n    closeQuestion(questionId: $questionId, reason: $reason) {\n      id\n      subject\n      authorName\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default CLOSE_QUESTION_MUTATION;\n","import gql from 'graphql-tag';\n\nconst REOPEN_QUESTION_MUTATION = gql`\n  mutation ReopenQuestionMutation($questionId: ID!) {\n    reopenQuestion(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default REOPEN_QUESTION_MUTATION;\n","import React from 'react';\n\nconst Modal = ({ children, title, toggle, visible }) => {\n  return (\n    <div className={`overlay ${visible ? 'overlay--visible' : ''}`}>\n      <div className=\"modal\">\n        <div className=\"modal__heading\">\n          <h1 className=\"modal__heading__title\">{title}</h1>\n        </div>\n        <div className=\"modal__body\">{children}</div>\n        <div className=\"modal__footer\">\n          <button\n            className=\"modal__footer__button\"\n            onClick={() => toggle(!visible)}\n          >\n            Luk vindue\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst CloseButton = ({\n  closeQuestion,\n  confirmText,\n  text,\n  reason,\n  data,\n  loading,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  if (!loading && data && data.closeQuestion.id) {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  }\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm(confirmText)) {\n      closeQuestion({\n        variables: {\n          reason,\n          questionId: state.backendChat.questionId,\n        },\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <button\n        className=\"backend-chat__button backend-chat__button--close-question\"\n        onClick={handleClick}\n        disabled\n      >\n        Vent venligst...\n      </button>\n    );\n  }\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--close-question\"\n      onClick={handleClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default CloseButton;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../../context/ChatContext';\n\nconst ReopenButton = ({ reopenQuestion }) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (window.confirm('Vil du genåbne dette spørgsmål?')) {\n      reopenQuestion({\n        variables: {\n          questionId: state.backendChat.questionId,\n        },\n      });\n\n      dispatch({\n        type: RESET_CHAT,\n        payload: null,\n      });\n    }\n  };\n\n  return (\n    <button\n      className=\"backend-chat__button backend-chat__button--reopen-question\"\n      onClick={handleClick}\n    >\n      Genåbn spørgsmål\n    </button>\n  );\n};\n\nexport default ReopenButton;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('backendSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('backendSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {\n    messages: null,\n    standardAnswers: null,\n  });\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('backendSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport {\n  ChatContext,\n  SET_CHAT_MESSAGE_TEXT,\n} from '../../../context/ChatContext';\nimport { SettingsContext } from '../../../context/SettingsContext';\n\nconst StandardAnswerList = ({ modalToggle, modalVisible }) => {\n  const [state] = useContext(SettingsContext);\n  const [, dispatch] = useContext(ChatContext);\n  const standardAnswers = state.standardAnswers;\n\n  const handleApplyStandardAnswer = text => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: text,\n    });\n\n    modalToggle(!modalVisible);\n  };\n\n  const renderList = Object.keys(standardAnswers).map((headingKey, index) => {\n    const heading = headingKey;\n    const items = standardAnswers[headingKey];\n\n    const renderItems = Object.keys(items).map((itemKey, index) => {\n      const heading = itemKey;\n      const text = items[itemKey];\n\n      return (\n        <div\n          className=\"standard-answer\"\n          key={`answer-item-${itemKey}-${index}`}\n          onClick={() => handleApplyStandardAnswer(text)}\n        >\n          <div className=\"standard-answer__heading\">\n            <h4 className=\"standard-answer__heading__title\">{heading}</h4>\n          </div>\n\n          <div className=\"standard-answer__text\">{text}</div>\n        </div>\n      );\n    });\n\n    return (\n      <div\n        className=\"standard-answer-list__item\"\n        key={`answer-${headingKey}-${index}`}\n      >\n        <div className=\"standard-answer-list__item__heading\">\n          <h3 className=\"standard-answer-list__item__heading__title\">\n            {heading}\n          </h3>\n        </div>\n        <div className=\"standard-answer-list__item__content\">{renderItems}</div>\n      </div>\n    );\n  });\n\n  return <div className=\"standard-answer-list\">{renderList}</div>;\n};\n\nexport default StandardAnswerList;\n","import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CLOSE_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/closeQuestion';\nimport REOPEN_QUESTION_MUTATION from '../../../../shared/Apollo/mutation/reopenQuestion';\n\nimport Modal from '../../Modal';\nimport CloseButton from './CloseButton';\nimport ReopenButton from './ReopenButton';\nimport StandardAnswerList from './StandardAnswerList';\n\nconst Actions = () => {\n  const [showStandardAnswers, setShowStandardAnswers] = useState(false);\n  const [showActions, setShowActions] = useState(false);\n\n  const handleToggleStandardAnswers = visible => {\n    setShowActions(false);\n    setShowStandardAnswers(visible);\n  };\n  const handleToggleActions = visible => {\n    setShowStandardAnswers(false);\n    setShowActions(visible);\n  };\n\n  return (\n    <div className=\"backend-chat__actions\">\n      <div className=\"button-list\">\n        <div className=\"button-list__item\">\n          <Modal\n            toggle={handleToggleStandardAnswers}\n            visible={showStandardAnswers}\n            title=\"Standard svar\"\n          >\n            <StandardAnswerList\n              modalToggle={handleToggleStandardAnswers}\n              modalVisible={showStandardAnswers}\n            />\n          </Modal>\n\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleStandardAnswers(!showStandardAnswers)}\n          >\n            Standard svar\n          </button>\n        </div>\n        <div className=\"button-list__item\">\n          <button\n            className=\"backend-chat__button\"\n            onClick={() => handleToggleActions(!showActions)}\n          >\n            Afslut samtale\n          </button>\n          <Modal\n            toggle={handleToggleActions}\n            visible={showActions}\n            title=\"Afslut samtalen\"\n          >\n            <div className=\"button-list\">\n              <div className=\"button-list__item\">\n                <Mutation mutation={REOPEN_QUESTION_MUTATION}>\n                  {reopenQuestion => (\n                    <ReopenButton reopenQuestion={reopenQuestion} />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk grundet spam\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som spam?\"\n                      reason=\"spam\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Luk som besvaret\"\n                      confirmText=\"Vil du lukke dette spørgsmål og markere spørgsmålet som besvaret?\"\n                      reason=\"answered\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n              <div className=\"button-list__item\">\n                <Mutation mutation={CLOSE_QUESTION_MUTATION}>\n                  {(closeQuestion, { loading, data }) => (\n                    <CloseButton\n                      text=\"Besvar senere\"\n                      confirmText=\"Vil du gemme denne chat og besvare den senere, som et spørgsmål?\"\n                      reason=\"later\"\n                      closeQuestion={closeQuestion}\n                      loading={loading}\n                      data={data}\n                    />\n                  )}\n                </Mutation>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Actions;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, SET_CHAT_MESSAGE_TEXT } from '../../context/ChatContext';\n\nconst Form = ({ createMessage }) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  const handleChange = event => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: event.target.value,\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    createMessage({\n      variables: {\n        questionId: state.backendChat.questionId,\n        text: state.backendChat.message,\n        sentFrom: 'admin',\n      },\n    });\n\n    // Clear the input.\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: '',\n    });\n  };\n\n  return (\n    <div className=\"backend-form\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Skriv en besked ...\"\n          required={true}\n          value={state.backendChat.message}\n          onChange={handleChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nimport Bar from './Bar';\nimport MessageList from './MessageList';\nimport Actions from './actions';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.backendChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || !data.question || loading) return '';\n\n        // The recieved question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"backend-chat\">\n            <Bar title={data.question.authorName} />\n            <MessageList\n              subject={data.question.subject}\n              questionCreatedAt={data.question.createdAt}\n              messages={data.question.messages}\n              subscribeToMore={subscribeToMore}\n            />\n\n            <Actions />\n\n            <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n              {createMessage => <Form createMessage={createMessage} />}\n            </Mutation>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { Fragment, useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  const renderChat = state.backendChat ? <Chat /> : '';\n\n  return (\n    <Fragment>\n      <Sidebar />\n      {renderChat}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>\n        {children}\n      </ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ClientChat from './clientChat';\nimport BackendChat from './backendChat';\n\nif (document.getElementById('chatty_client')) {\n  ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n}\n\nif (document.getElementById('chatty_backend')) {\n  ReactDOM.render(<BackendChat />, document.getElementById('chatty_backend'));\n}\n"],"sourceRoot":""}