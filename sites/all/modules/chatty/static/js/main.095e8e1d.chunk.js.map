{"version":3,"sources":["shared/utils/getUrlParam.js","clientChat/context/ChatContext.js","shared/Apollo/mutation/createQuestion.js","clientChat/components/Question/Form.js","clientChat/components/Question/index.js","shared/Apollo/query/getQuestion.js","shared/Apollo/mutation/createMessage.js","backendChat/context/ChatContext.js","shared/Apollo/mutation/makeHeartbeat.js","clientChat/context/SettingsContext.js","clientChat/components/Chat/StatusBar.js","shared/Apollo/subscription/newMessage.js","shared/Apollo/subscription/questionClosed.js","shared/Apollo/subscription/questionAssigned.js","shared/Apollo/subscription/questionReopened.js","shared/utils/convertTimestampToDate.js","shared/utils/generateDateString.js","clientChat/components/Chat/Message.js","shared/utils/scrollToBottom.js","clientChat/components/Chat/MessageList.js","clientChat/components/Chat/Form.js","clientChat/components/Chat/index.js","clientChat/components/App.js","shared/Apollo/index.js","clientChat/context/Store.js","shared/Apollo/query/getSettings.js","clientChat/components/Settings.js","clientChat/index.js","shared/Apollo/query/getQuestions.js","shared/Apollo/subscription/newQuestion.js","shared/Apollo/subscription/questionAssignedToConsultant.js","shared/Apollo/mutation/assignQuestion.js","shared/utils/calculateOffline.js","backendChat/components/Sidebar/QuestionTeaser.js","backendChat/components/Sidebar/QuestionList.js","shared/Apollo/subscription/questionHeartbeat.js","backendChat/components/Sidebar/AvailableQuestions.js","shared/Apollo/subscription/assignedQuestionClosed.js","backendChat/components/Sidebar/AssignedQuestions.js","backendChat/components/Sidebar/index.js","shared/Apollo/query/getMessages.js","backendChat/components/Chat/OfflineMessage.js","backendChat/components/Chat/ReadonlyMessage.js","backendChat/components/Chat/Bar.js","backendChat/components/Chat/Message.js","backendChat/components/Chat/MessageList.js","shared/Apollo/mutation/closeQuestion.js","shared/Apollo/mutation/reopenQuestion.js","backendChat/context/SettingsContext.js","backendChat/components/Chat/Form.js","backendChat/components/Chat/index.js","backendChat/components/App.js","backendChat/context/Store.js","backendChat/components/Settings.js","backendChat/index.js","index.js"],"names":["getUrlParam","parameter","vars","window","location","search","substring","split","i","length","pair","ChatContext","React","createContext","ChatReducer","state","action","type","localStorage","removeItem","Object","objectSpread2","clientChat","setItem","payload","questionId","ChatProvider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","data","getItem","react_default","a","createElement","Provider","value","CREATE_QUESTION_MUTATION","gql","_templateObject","Form","createQuestion","loading","nameInput","useRef","emailInput","subjectInput","disableInputs","onSubmit","event","preventDefault","agencyIdParam","agencyMailParam","urlParam","alert","variables","agencyId","agencyMail","authorName","current","authorEmail","subject","url","className","autoFocus","disabled","rows","ref","required","CreateQuestion","_useContext","useContext","react_apollo_esm","mutation","id","Question_Form","GET_QUESTION","getQuestion_templateObject","CREATE_MESSAGE_MUTATION","createMessage_templateObject","backendChat","message","ChatContext_ChatContext","MAKE_HEARTBEAT_MUTATION","makeHeartbeat_templateObject","SettingsContext","SettingsReducer","JSON","stringify","messages","parse","standardAnswers","SettingsProvider","localStorageData","StatusBar","status","concat","chatPending","NEW_MESSAGE","newMessage_templateObject","QUESTION_CLOSED_SUBSCRIPTION","questionClosed_templateObject","QUESTION_ASSIGNED_SUBSCRIPTION","questionAssigned_templateObject","QUESTION_REOPENED_SUBSCRIPTION","questionReopened_templateObject","convertTimestampToDate","timestamp","Date","generateDateString","date","mutatedDate","format","locale","daLocale","mutatedTime","Message","sentFrom","text","createdAt","convertedDate","_useState","useState","_useState2","dateString","setDateString","timer","setInterval","clearInterval","scrollToBottom","element","scrollHeight","scrollTop","MessageList","questionCreatedAt","subscribeToMore","makeHeartbeat","_useContext2","document","NEW_MESSAGE_SUBSCRIPTION","updateQuery","prev","_ref2","subscriptionData","newObject","assign","question","newMessage","toConsumableArray","_ref3","questionAssigned","_ref4","_ref5","questionReopened","querySelector","renderLoading","Chat_Message","map","index","key","createMessage","setMessage","formRef","react_textarea_autosize_esm_browser","minRows","maxRows","placeholder","onChange","target","onKeyDown","keyCode","shiftKey","dispatchEvent","Event","ChatContainer","query","GET_QUESTION_QUERY","disabledStates","Chat_StatusBar","Chat_MessageList","Chat_Form","App","components_Chat","components_Question","httpLink","HttpLink","uri","process","fetch","wsLink","WebSocketLink","options","reconnect","link","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","Apollo","Store","SettingsContext_SettingsProvider","ChatContext_ChatProvider","GET_SETTINGS","getSettings_templateObject","SettingsSetter","settings","Settings","GET_SETTINGS_QUERY","Settings_SettingsSetter","Index","shared_Apollo","context_Store","components_Settings","components_App","GET_QUESTIONS","getQuestions_templateObject","NEW_QUESTION","newQuestion_templateObject","QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION","questionAssignedToConsultant_templateObject","ASSIGN_QUESTION_MUTATION","assignQuestion_templateObject","calculateOffline","differenceInSeconds","QuestionTeaser","canAssign","canSetActive","heading","source","isActive","lastHeartbeat","myConsultantId","Drupal","consultantId","toString","hasUnreadMessages","setHasUnreadMessages","_useState3","_useState4","_useState5","isOffline","_useState6","offline","setOffline","truncate","AssignQuestionMutation","assignQuestion","onClick","confirm","QuestionList","title","questions","subscriptions","sort","b","consultant","Sidebar_QuestionTeaser","lastHeartbeatAt","readOnly","QUESTION_HEARTBEAT_SUBSCRIPTION","questionHeartbeat_templateObject","AvailableQuestions","statusType","push","NEW_QUESTION_SUBSCRIPTION","newQuestion","questionToRemove","questionAssignedToConsultant","filteredQuestions","filter","questionToReadd","questionHeartbeat","currentQuestion","find","mutatedQuestion","Sidebar_QuestionList","ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION","assignedQuestionClosed_templateObject","AssignedQuestions","assignedQuestionClosed","Sidebar","Sidebar_AvailableQuestions","Sidebar_AssignedQuestions","GET_MESSAGES_QUERY","getMessages_templateObject","OfflineMessage","Fragment","ReadonlyMessage","Bar","name","email","href","submittedBy","author","consultantName","components_Chat_Message","closeQuestion_templateObject","reopenQuestion_templateObject","SettingsContext_SettingsContext","Chat_Bar","Chat_OfflineMessage","Chat_ReadonlyMessage","fetchPolicy","pollInterval","components_Chat_MessageList","components_Chat_Form","renderChat","src_backendChat_components_Chat","react","backendChat_components_Sidebar","context_SettingsContext_SettingsProvider","context_ChatContext_ChatProvider","components_Settings_SettingsSetter","backendChat_context_Store","backendChat_components_Settings","backendChat_components_App","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.095e8e1d.chunk.js","sourcesContent":["const getUrlParam = parameter => {\n  const query = window.location.search.substring(1);\n  const vars = query.split('&');\n\n  for (let i = 0; i < vars.length; i++) {\n    const pair = vars[i].split('=');\n\n    if (pair[0] === parameter) {\n      return pair[1];\n    }\n  }\n\n  return '';\n};\n\nexport default getUrlParam;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('clientActiveQuestionId');\n\n      return {\n        ...state,\n        clientChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('clientActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        clientChat: {\n          questionId: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    clientChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('clientActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst CREATE_QUESTION_MUTATION = gql`\n  mutation CreateQuestionMutation(\n    $agencyId: String!\n    $agencyMail: String!\n    $authorName: String!\n    $authorEmail: String!\n    $subject: String!\n    $url: String!\n  ) {\n    createQuestion(\n      data: {\n        authorName: $authorName\n        authorEmail: $authorEmail\n        agencyMail: $agencyMail\n        agencyId: $agencyId\n        subject: $subject\n        url: $url\n      }\n    ) {\n      id\n      subject\n      authorName\n      status\n    }\n  }\n`;\n\nexport default CREATE_QUESTION_MUTATION;\n","import React, { useRef } from 'react';\n\nimport getUrlParam from '../../../shared/utils/getUrlParam';\n\nconst Form = ({ createQuestion, loading }) => {\n  const nameInput = useRef('');\n  const emailInput = useRef('');\n  const subjectInput = useRef('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const agencyIdParam = getUrlParam('agency_id');\n    const agencyMailParam = getUrlParam('agency_mail');\n    const urlParam = getUrlParam('url');\n\n    // Validate params.\n    if (!agencyIdParam || !urlParam) {\n      return alert('A needed param was not set.');\n    }\n\n    createQuestion({\n      variables: {\n        agencyId: agencyIdParam,\n        agencyMail: agencyMailParam,\n        authorName: nameInput.current.value,\n        authorEmail: emailInput.current.value,\n        subject: subjectInput.current.value,\n        url: urlParam,\n      },\n    });\n  };\n\n  const disableInputs = loading;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--question\">\n        <label>Hvad vil du spørge om?</label>\n        <div>\n          <textarea autoFocus disabled={disableInputs} rows=\"5\" ref={subjectInput} />\n        </div>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--name\">\n        <label>\n          Dit navn\n          <div>\n            <input\n              type=\"text\"\n              disabled={disableInputs}\n              ref={nameInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"question-form__input-wrapper question-form__input-wrapper--email\">\n        <label>\n          Din e-mail adresse\n          <div>\n            <input\n              type=\"email\"\n              disabled={disableInputs}\n              ref={emailInput}\n              required={true}\n            />\n          </div>\n        </label>\n      </div>\n\n      <input type=\"submit\" value=\"Spørg nu\" />\n    </form>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation } from 'react-apollo';\n\nimport CREATE_QUESTION_MUTATION from '../../../shared/Apollo/mutation/createQuestion';\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\n\nimport Form from './Form';\n\nconst CreateQuestion = () => {\n  const [, dispatch] = useContext(ChatContext);\n\n  return (\n    <div className=\"question-form\">\n      <Mutation mutation={CREATE_QUESTION_MUTATION}>\n        {(createQuestion, { loading, data }) => {\n          if (data && data.createQuestion.id) {\n            dispatch({\n              type: SET_ACTIVE_CHAT,\n              payload: data.createQuestion.id,\n            });\n          }\n\n          return <Form createQuestion={createQuestion} loading={loading} />;\n        }}\n      </Mutation>\n    </div>\n  );\n};\n\nexport default CreateQuestion;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTION = gql`\n  query QuestionQuery($questionId: ID!) {\n    question(questionId: $questionId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default GET_QUESTION;\n","import gql from 'graphql-tag';\n\nconst CREATE_MESSAGE_MUTATION = gql`\n  mutation CreateMessageMutation($questionId: ID!, $sentFrom: String!, $text: String!) {\n    createMessage(questionId: $questionId, data: { text: $text, sentFrom: $sentFrom }) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default CREATE_MESSAGE_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_CHAT = 'RESET_CHAT';\nexport const SET_ACTIVE_CHAT = 'SET_ACTIVE_CHAT';\nexport const SET_CHAT_MESSAGE_TEXT = 'SET_CHAT_MESSAGE_TEXT';\n\nexport const ChatContext = React.createContext();\n\nexport const ChatReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_CHAT:\n      localStorage.removeItem('backendActiveQuestionId');\n\n      return {\n        ...state,\n        backendChat: null,\n      };\n    case SET_ACTIVE_CHAT:\n      localStorage.setItem('backendActiveQuestionId', action.payload);\n\n      return {\n        ...state,\n        backendChat: {\n          questionId: action.payload,\n          message: '',\n        },\n      };\n    case SET_CHAT_MESSAGE_TEXT:\n      return {\n        ...state,\n        backendChat: {\n          ...state.backendChat,\n          message: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(ChatReducer, {\n    backendChat: null,\n  });\n\n  // eslint-disable-next-line\n  useEffect(() => {\n    const data = localStorage.getItem('backendActiveQuestionId');\n\n    if (data) {\n      dispatch({\n        type: SET_ACTIVE_CHAT,\n        payload: data,\n      });\n    }\n  }, []);\n\n  return (\n    <ChatContext.Provider value={[state, dispatch]}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n","import gql from 'graphql-tag';\n\nconst MAKE_HEARTBEAT_MUTATION = gql`\n  mutation MakeHeartbeatMutation($questionId: ID!) {\n    makeHeartbeat(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default MAKE_HEARTBEAT_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('clientSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('clientSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {});\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('clientSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { SettingsContext } from '../../context/SettingsContext';\n\nconst StatusBar = ({ status }) => {\n  const [state] = useContext(SettingsContext);\n\n  if (status === 'pending') {\n    return (\n      <div className={`client-status-bar client-status-bar--${status}`}>\n        {state.messages.chatPending}\n      </div>\n    );\n  }\n\n  return '';\n};\n\nexport default StatusBar;\n","import gql from 'graphql-tag';\n\nconst NEW_MESSAGE = gql`\n  subscription NewMessageSubscription($questionId: ID!) {\n    newMessage(questionId: $questionId) {\n      id\n      text\n      sentFrom\n      createdAt\n      question {\n        id\n        authorName\n      }\n    }\n  }\n`;\n\nexport default NEW_MESSAGE;\n","import gql from 'graphql-tag';\n\nconst QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription QuestionClosedSubscription($questionId: ID!) {\n    questionClosed(questionId: $questionId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default QUESTION_CLOSED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_SUBSCRIPTION = gql`\n  subscription QuestionAssignedSubscription($questionId: ID) {\n    questionAssigned(questionId: $questionId) {\n      status\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_REOPENED_SUBSCRIPTION = gql`\n  subscription QuestionReopenedSubscription($questionId: ID) {\n    questionReopened(questionId: $questionId) {\n      id\n      status\n      consultant\n      subject\n      authorName\n      authorEmail\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_REOPENED_SUBSCRIPTION;\n","const convertTimestampToDate = timestamp => new Date(timestamp * 1000);\n\nexport default convertTimestampToDate;\n","import daLocale from 'date-fns/locale/da';\nimport format from 'date-fns/format';\n\nconst generateDateString = date => {\n  const mutatedDate = format(date, 'DD.MM.YYYY', {\n    locale: daLocale,\n  });\n\n  const mutatedTime = format(date, 'HH:mm', {\n    locale: daLocale,\n  });\n\n  return `D. ${mutatedDate} kl. ${mutatedTime}`;\n};\n\nexport default generateDateString;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`client-message client-message--${sentFrom}`}>\n      <div className=\"client-message__box\">\n        <div className=\"client-message__text\">{text}</div>\n      </div>\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"client-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","const scrollToBottom = element => {\n  if (!element) {\n    return false;\n  }\n\n  const { scrollHeight } = element;\n\n  element.scrollTop = scrollHeight;\n}\n\nexport default scrollToBottom;\n","import React, { useEffect, useContext } from 'react';\n\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\nimport QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionClosed';\nimport QUESTION_ASSIGNED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssigned';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport { ChatContext } from '../../context/ChatContext';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  disabled,\n  subject,\n  questionCreatedAt,\n  messages,\n  subscribeToMore,\n  makeHeartbeat,\n}) => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  useEffect(() => {\n    // New message.\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const newObject = Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            messages: [subscriptionData.data.newMessage],\n          },\n        });\n\n        if (prev.question.messages) {\n          newObject.question.messages = [\n            ...prev.question.messages,\n            subscriptionData.data.newMessage,\n          ];\n        }\n\n        return newObject;\n      },\n    });\n\n    // Question assigned.\n    subscribeToMore({\n      document: QUESTION_ASSIGNED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionAssigned,\n          },\n        });\n      },\n    });\n\n    // Close question.\n    subscribeToMore({\n      document: QUESTION_CLOSED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        // Reset the chat.\n        dispatch({\n          type: RESET_CHAT,\n          payload: null,\n        });\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: null,\n        });\n      },\n    });\n\n    // Question repeoned.\n    subscribeToMore({\n      document: QUESTION_REOPENED_SUBSCRIPTION,\n      variables: {\n        questionId: state.clientChat.questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        return Object.assign({}, prev, {\n          ...prev,\n          question: {\n            ...prev.question,\n            ...subscriptionData.data.questionReopened,\n          },\n        });\n      },\n    });\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // Make a heartbeat every 10 seconds.\n    const timer = setInterval(() => {\n      makeHeartbeat({\n        variables: {\n          questionId: state.clientChat.questionId,\n        },\n      });\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.client-messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => (\n      <div key={`client-message-${index}-${message.id}`}>\n        <Message\n          text={message.text}\n          createdAt={message.createdAt}\n          sentFrom={message.sentFrom}\n        />\n      </div>\n    ));\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  const renderLoading = () => {\n    if (disabled) {\n      return (\n        <div className=\"loading\">\n          <div />\n          <div />\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        disabled\n          ? 'client-messages client-messages--disabled'\n          : 'client-messages'\n      }\n    >\n      {renderLoading()}\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React, { useRef, useContext, useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext } from '../../context/ChatContext';\n\nconst Form = ({ createMessage, disabled }) => {\n  const [state] = useContext(ChatContext);\n  const [message, setMessage] = useState('');\n  const formRef = useRef();\n\n  const handleChange = event => setMessage(event.target.value);\n\n  const handleKeyDown = event => {\n\n    if (event.keyCode === 13 && !(event.keyCode === 13 && event.shiftKey)) {\n      event.preventDefault();\n\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.clientChat.questionId,\n          text: message,\n          sentFrom: 'user',\n        },\n      });\n\n      // Clear the input.\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"client-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          autoFocus\n        />\n        <input type=\"submit\" value=\"Send besked\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport { ChatContext } from '../../context/ChatContext';\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { RESET_CHAT } from '../../../backendChat/context/ChatContext';\nimport MAKE_HEARTBEAT_MUTATION from '../../../shared/Apollo/mutation/makeHeartbeat';\n\nimport StatusBar from './StatusBar';\nimport MessageList from './MessageList';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.clientChat.questionId,\n      }}\n    >\n      {({ data, loading, subscribeToMore }) => {\n        if (!data || loading) return '';\n\n        const { status } = data.question;\n        const disabledStates = status === 'pending' || status === 'complete';\n\n        // The recieved question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (data.question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"client-chat\">\n            <StatusBar status={data.question.status} />\n\n            <Mutation mutation={MAKE_HEARTBEAT_MUTATION}>\n              {makeHeartbeat => (\n                <MessageList\n                  disabled={disabledStates}\n                  subject={data.question.subject}\n                  questionCreatedAt={data.question.createdAt}\n                  messages={data.question.messages}\n                  subscribeToMore={subscribeToMore}\n                  makeHeartbeat={makeHeartbeat}\n                />\n              )}\n            </Mutation>\n\n            <Mutation mutation={CREATE_MESSAGE_MUTATION}>\n              {createMessage => (\n                <Form disabled={disabledStates} createMessage={createMessage} />\n              )}\n            </Mutation>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Question from './Question';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  if (state.clientChat) {\n    return <Chat />;\n  }\n\n  return <Question />;\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport fetch from 'unfetch';\n\n// HTTP link.\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_APOLLO_HTTP_URI,\n  fetch: fetch,\n});\n\n// WebSocket link.\nconst wsLink = new WebSocketLink({\n  uri: process.env.REACT_APP_APOLLO_WS_URI,\n  fetch: fetch,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nconst Apollo = ({ children }) => (\n  <ApolloProvider client={client}>\n    {children}\n  </ApolloProvider>\n);\n\nexport default Apollo;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>{children}</ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import gql from 'graphql-tag';\n\nconst GET_SETTINGS = gql`\n  query {\n    settings {\n      messages\n      standardAnswers\n    }\n  }\n`;\n\nexport default GET_SETTINGS;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import gql from 'graphql-tag';\n\nconst GET_QUESTIONS = gql`\n  query QuestionsQuery($statusType: String!, $consultantId: ID) {\n    questions(statusType: $statusType, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      authorEmail\n      consultant\n      status\n      source\n      lastHeartbeatAt\n      createdAt\n    }\n  }\n`;\n\nexport default GET_QUESTIONS;\n","import gql from 'graphql-tag';\n\nconst NEW_QUESTION = gql`\n  subscription NewQuestionSubscription($statusType: String!) {\n    newQuestion(statusType: $statusType) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      source\n      consultant\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default NEW_QUESTION;\n","import gql from 'graphql-tag';\n\nconst QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION = gql`\n  subscription QuestionAssignedToConsultantSubscription($consultantId: ID) {\n    questionAssignedToConsultant(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION;\n","import gql from 'graphql-tag';\n\nconst ASSIGN_QUESTION_MUTATION = gql`\n  mutation AssignQuestionMutation($questionId: ID!, $consultantId: ID!) {\n    assignQuestion(questionId: $questionId, consultantId: $consultantId) {\n      id\n      subject\n      authorName\n      createdAt\n    }\n  }\n`;\n\nexport default ASSIGN_QUESTION_MUTATION;\n","import differenceInSeconds from 'date-fns/difference_in_seconds';\nimport convertTimestampToDate from './convertTimestampToDate';\n\nconst calculateOffline = timestamp => {\n  const distanceInSeconds = 15;\n  const date = convertTimestampToDate(timestamp);\n\n  // Difference is bigger than $distance. It is seen as offline.\n  if (differenceInSeconds(new Date(), date) > distanceInSeconds) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default calculateOffline;\n","import React, { useState, useEffect, useContext } from 'react';\nimport truncate from 'voca/truncate';\nimport { Mutation } from 'react-apollo';\n\nimport { ChatContext, SET_ACTIVE_CHAT } from '../../context/ChatContext';\nimport AssignQuestionMutation from '../../../shared/Apollo/mutation/assignQuestion';\nimport NEW_MESSAGE_SUBSCRIPTION from '../../../shared/Apollo/subscription/newMessage';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst QuestionTeaser = ({\n  canAssign,\n  canSetActive,\n  questionId,\n  heading,\n  text,\n  source,\n  isActive,\n  createdAt,\n  lastHeartbeat,\n  subscribeToMore,\n}) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [hasUnreadMessages, setHasUnreadMessages] = useState(false);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n  const [state, dispatch] = useContext(ChatContext);\n\n  // DateString.\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  // Has unread messages.\n  useEffect(() => {\n    subscribeToMore({\n      document: NEW_MESSAGE_SUBSCRIPTION,\n      variables: {\n        questionId,\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n\n        const { newMessage } = subscriptionData.data;\n\n        // Message is sent by admin. (don't notify of own messages).\n        if (newMessage.sentFrom === 'admin') {\n          setHasUnreadMessages(false);\n\n          return prev;\n        }\n\n        // The chat is open.\n        if (state.backendChat && state.backendChat.questionId) {\n          // It's the question viewed - no need to \"new messages\" for that.\n          if (state.backendChat.questionId === newMessage.question.id) {\n            setHasUnreadMessages(false);\n\n            return prev;\n          }\n        }\n\n        setHasUnreadMessages(true);\n\n        return prev;\n      },\n    });\n    // eslint-disable-next-line\n  }, [state]);\n\n  const handleAssignQuestion = assign => {\n    if (window.confirm('Vil du overtage dette spørgsmål?')) {\n      assign({\n        variables: {\n          questionId: questionId,\n          consultantId: myConsultantId,\n        },\n      });\n    }\n  };\n\n  const handleSetActive = () => {\n    dispatch({\n      type: SET_ACTIVE_CHAT,\n      payload: questionId,\n    });\n\n    setHasUnreadMessages(false);\n  };\n\n  if (offline) {\n    heading = truncate(heading, 20) + ' (offline)';\n  } else {\n    heading = truncate(heading, 32);\n  }\n\n  return (\n    <Mutation mutation={AssignQuestionMutation}>\n      {assignQuestion => (\n        <div\n          className={`question question--teaser ${isActive && 'question--active'}`}\n          onClick={() => {\n            if (canAssign) {\n              handleAssignQuestion(assignQuestion);\n            }\n\n            if (canSetActive) {\n              handleSetActive();\n            }\n          }}\n        >\n          <div className=\"question__heading\">\n            <div className=\"question__heading__title\">{heading}</div>\n          </div>\n\n          <div className=\"question__body\">{truncate(text, 35)}</div>\n\n          <div className=\"question__source\">{truncate(source, 35)}</div>\n\n          <small className=\"question__created-at\">{dateString}</small>\n\n          {hasUnreadMessages && (\n            <small className=\"question__unread-messages\">\n              Der er ulæste beskeder\n            </small>\n          )}\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nexport default QuestionTeaser;\n","import React, { useEffect, useContext } from 'react';\n\nimport { ChatContext } from '../../context/ChatContext';\nimport QuestionTeaser from './QuestionTeaser';\n\nconst QuestionList = ({\n  canAssign,\n  canSetActive,\n  title,\n  questions,\n  subscriptions,\n  subscribeToMore,\n}) => {\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [state] = useContext(ChatContext);\n\n  useEffect(() => {\n    for (let i = 0; i < subscriptions.length; i++) {\n      subscriptions[i]();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const renderQuestions = () => {\n    if (!questions || questions.length === 0) {\n      return (\n        <div className=\"backend-list__item backend-list__item--no-result\">\n          Ingen samtaler at vise.\n        </div>\n      );\n    }\n\n    return questions.sort((a, b) => (a.id > b.id) ? 1 : -1).map(question => (\n      <div\n        className={\n          myConsultantId !== question.consultant\n            ? 'backend-list__item backend-list__item--faded'\n            : 'backend-list__item'\n        }\n        key={`question-${question.id}`}\n      >\n        <QuestionTeaser\n          questionId={question.id}\n          heading={question.authorName}\n          text={question.subject}\n          createdAt={question.createdAt}\n          canAssign={canAssign}\n          canSetActive={canSetActive}\n          lastHeartbeat={question.lastHeartbeatAt}\n          readOnly={myConsultantId !== question.consultant}\n          subscribeToMore={subscribeToMore}\n          isActive={(state.backendChat && (state.backendChat.questionId === question.id))}\n        />\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"backend-list\">\n      <div className=\"backend-list__heading\">\n        <h4 className=\"backend-list__heading__title\">{title}</h4>\n      </div>\n      <div className=\"backend-list__body\">{renderQuestions()}</div>\n    </div>\n  );\n};\n\nexport default QuestionList;\n","import gql from 'graphql-tag';\n\nconst QUESTION_HEARTBEAT_SUBSCRIPTION = gql`\n  subscription QuestionHeartbeatSubscription($questionId: ID) {\n    questionHeartbeat(questionId: $questionId) {\n      id\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default QUESTION_HEARTBEAT_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport NEW_QUESTION_SUBSCRIPTION from '../../../shared/Apollo/subscription/newQuestion';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\n\nimport QuestionList from './QuestionList';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat';\n\nconst AvailableQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        consultantId: null,\n        statusType: 'pending',\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // New questions added.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: NEW_QUESTION_SUBSCRIPTION,\n            variables: {\n              consultantId: null,\n              statusType: 'pending',\n            },\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question = subscriptionData.data.newQuestion;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToReadd = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToReadd.id,\n              );\n\n              filteredQuestions.push(questionToReadd);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              };\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Chats, Afventer svar\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={true}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AvailableQuestions;\n","import gql from 'graphql-tag';\n\nconst ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION = gql`\n  subscription AssignedQuestionClosedSubscription($consultantId: ID) {\n    assignedQuestionClosed(consultantId: $consultantId) {\n      id\n      status\n      subject\n      authorName\n      authorEmail\n      consultant\n      source\n      createdAt\n      lastHeartbeatAt\n    }\n  }\n`;\n\nexport default ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION;\n","import React from 'react';\nimport { Query } from 'react-apollo';\n\nimport GET_QUESTIONS from '../../../shared/Apollo/query/getQuestions';\nimport QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionAssignedToConsultant';\nimport QUESTION_REOPENED_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionReopened';\nimport ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION from '../../../shared/Apollo/subscription/assignedQuestionClosed';\nimport QUESTION_HEARTBEAT_SUBSCRIPTION from '../../../shared/Apollo/subscription/questionHeartbeat';\n\nimport QuestionList from './QuestionList';\n\nconst AssignedQuestions = () => {\n  let subscriptions = [];\n\n  return (\n    <Query\n      query={GET_QUESTIONS}\n      variables={{\n        statusType: 'assigned',\n        consultantId: null,\n      }}\n    >\n      {({ loading, data, subscribeToMore }) => {\n        if (!data) return '';\n\n        if (loading) {\n          return 'Henter...';\n        }\n\n        // Question assigned to consultant.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_ASSIGNED_TO_CONSULTANT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const question =\n                subscriptionData.data.questionAssignedToConsultant;\n\n              return Object.assign({}, prev, {\n                questions: [...prev.questions, question],\n              });\n            },\n          }),\n        );\n\n        // Question closed.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: ASSIGNED_QUESTION_CLOSED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove =\n                subscriptionData.data.assignedQuestionClosed;\n\n              // Remove the ID from the current questions list.\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question reopened.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_REOPENED_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionToRemove = subscriptionData.data.questionReopened;\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionToRemove.id,\n              );\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        // Question heartbeat.\n        subscriptions.push(() =>\n          subscribeToMore({\n            document: QUESTION_HEARTBEAT_SUBSCRIPTION,\n            updateQuery: (prev, { subscriptionData }) => {\n              if (!subscriptionData.data) return prev;\n\n              const questionHeartbeat = subscriptionData.data.questionHeartbeat;\n              const currentQuestion = prev.questions.find(\n                question => question.id === questionHeartbeat.id,\n              );\n\n              if (!currentQuestion) return prev;\n\n              const mutatedQuestion = {\n                ...currentQuestion,\n              };\n\n              const filteredQuestions = prev.questions.filter(\n                question => question.id !== questionHeartbeat.id,\n              );\n\n              filteredQuestions.push(mutatedQuestion);\n\n              return Object.assign({}, prev, {\n                questions: filteredQuestions,\n              });\n            },\n          }),\n        );\n\n        return (\n          <QuestionList\n            title=\"Chats, Ved at blive besvaret\"\n            questions={data.questions}\n            subscriptions={subscriptions}\n            subscribeToMore={subscribeToMore}\n            canAssign={false}\n            canSetActive={true}\n          />\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default AssignedQuestions;\n","import './index.css';\nimport React from 'react';\n\nimport AvailableQuestions from './AvailableQuestions';\nimport AssignedQuestions from './AssignedQuestions';\n\nconst Sidebar = () => (\n  <div className=\"backend-sidebar\">\n    <AvailableQuestions />\n    <AssignedQuestions />\n  </div>\n);\n\nexport default Sidebar;\n","import gql from 'graphql-tag';\n\nconst GET_MESSAGES_QUERY = gql`\n  query MessagesQuery($questionId: ID!) {\n    messages(questionId: $questionId) {\n      id\n      text\n      sentFrom\n      createdAt\n    }\n  }\n`;\n\nexport default GET_MESSAGES_QUERY;\n","import React, { useState, useEffect } from 'react';\n\nimport isOffline from '../../../shared/utils/calculateOffline';\n\nconst OfflineMessage = ({ lastHeartbeat }) => {\n  const [offline, setOffline] = useState(isOffline(lastHeartbeat));\n\n  // Offline.\n  useEffect(() => {\n    // Check if we are now offline.\n    const timer = setInterval(() => {\n      setOffline(isOffline(lastHeartbeat));\n    }, 1000 * 10);\n\n    return () => clearInterval(timer);\n  });\n\n  if (offline) {\n    return (\n      <div className=\"backend-notice backend-notice--offline\">Brugeren er offline...</div>\n    );\n  }\n\n  return <></>;\n};\n\nexport default OfflineMessage;\n","import React from 'react';\n\nconst ReadonlyMessage = () => (\n  <div className=\"backend-notice backend-notice--readonly\">\n    Du observerer en chat der er tildelt en anden bruger.\n  </div>\n);\n\nexport default ReadonlyMessage;\n","import React, { useContext } from 'react';\n\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nconst Bar = ({ name, email, source }) => {\n  const [, dispatch] = useContext(ChatContext);\n\n  const handleCloseChat = () => {\n    dispatch({\n      type: RESET_CHAT,\n      payload: null,\n    });\n  };\n\n  return (\n    <div className=\"backend-bar\">\n      <div className=\"backend-bar__heading\">\n        <h2>{name}</h2>\n        <h3>\n          <a href={`mailto:${email}`}>{email}</a>\n        </h3>\n        <h4>{source}</h4>\n      </div>\n\n      <div className=\"backend-bar__spacer\" />\n\n      <span\n        className=\"backend-bar__button bar__button--close\"\n        onClick={handleCloseChat}\n        title=\"Klik for at lukke\"\n      >\n        X\n      </span>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React, { useState, useEffect } from 'react';\n\nimport convertTimestampToDate from '../../../shared/utils/convertTimestampToDate';\nimport generateDateString from '../../../shared/utils/generateDateString';\n\nconst Message = ({ sentFrom, submittedBy, text, createdAt }) => {\n  const convertedDate = convertTimestampToDate(createdAt);\n  const [dateString, setDateString] = useState(\n    generateDateString(convertedDate),\n  );\n\n  useEffect(() => {\n    // Update dateString every thirty second as time passes.\n    const timer = setInterval(() => {\n      setDateString(generateDateString(convertedDate));\n    }, 1000 * 30);\n\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className={`backend-message backend-message--${sentFrom}`}>\n      <div className=\"backend-message__box\">\n        <div className=\"backend-message__text\">{text}</div>\n      </div>\n      \n      {submittedBy && (\n        <div className=\"backend-message__submitted-by\">Af {submittedBy}</div>\n      )}\n\n      {sentFrom === 'system' ? (\n        ''\n      ) : (\n        <div className=\"backend-message__created-at\">{dateString}</div>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useEffect } from 'react';\n\nimport Message from './Message';\nimport scrollToBottom from '../../../shared/utils/scrollToBottom';\n\nconst MessageList = ({\n  author,\n  subject,\n  questionCreatedAt,\n  messages,\n}) => {\n  const consultantName =\n    window.Drupal &&\n      window.Drupal.settings &&\n      window.Drupal.settings.consultantName\n      ? window.Drupal.settings.consultantName.toString()\n      : 'ikke defineret';\n\n  useEffect(() => {\n    // Scroll to the bottom of the messages.\n    scrollToBottom(document.querySelector('.backend-chat__messages'));\n  });\n\n  const renderMessages = () =>\n    messages.map((message, index) => {\n      let submittedBy = '';\n\n      if (message.sentFrom === 'admin') {\n        submittedBy = consultantName;\n      }\n      else if (message.sentFrom === 'user') {\n        submittedBy = author;\n      }\n\n      return (\n        <div key={`backend-message-${index}-${message.id}`}>\n          <Message\n            submittedBy={submittedBy}\n            text={message.text}\n            createdAt={message.createdAt}\n            sentFrom={message.sentFrom}\n          />\n        </div>\n      );\n    });\n\n  const renderSubject = () => (\n    <Message text={subject} createdAt={questionCreatedAt} sentFrom=\"user\" />\n  );\n\n  return (\n    <div className=\"backend-chat__messages\">\n      {renderSubject()}\n      {renderMessages()}\n    </div>\n  );\n};\n\nexport default MessageList;\n","import gql from 'graphql-tag';\n\nconst CLOSE_QUESTION_MUTATION = gql`\n  mutation CloseQuestionMutation(\n    $questionId: ID!\n    $reason: String!\n    $keepConsultant: Boolean\n    $title: String\n  ) {\n    closeQuestion(\n      questionId: $questionId\n      reason: $reason\n      keepConsultant: $keepConsultant\n      title: $title\n    ) {\n      id\n      subject\n      authorName\n      createdAt\n      messages {\n        id\n        text\n        sentFrom\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default CLOSE_QUESTION_MUTATION;\n","import gql from 'graphql-tag';\n\nconst REOPEN_QUESTION_MUTATION = gql`\n  mutation ReopenQuestionMutation($questionId: ID!) {\n    reopenQuestion(questionId: $questionId) {\n      id\n    }\n  }\n`;\n\nexport default REOPEN_QUESTION_MUTATION;\n","import React, { useReducer, useEffect } from 'react';\n\nexport const RESET_SETTINGS = 'RESET_SETTINGS';\nexport const SET_SETTINGS = 'SET_SETTINGS';\n\nexport const SettingsContext = React.createContext();\n\nexport const SettingsReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_SETTINGS:\n      localStorage.removeItem('backendSettings');\n\n      return {};\n    case SET_SETTINGS:\n      localStorage.setItem('backendSettings', JSON.stringify(action.payload));\n\n      return {\n        ...action.payload,\n        messages: JSON.parse(action.payload.messages),\n        standardAnswers: JSON.parse(action.payload.standardAnswers),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(SettingsReducer, {\n    messages: null,\n    standardAnswers: null,\n  });\n\n  // Grab data from localStorage on first run.\n  // eslint-disable-next-line\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('backendSettings');\n\n    if (localStorageData) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: JSON.parse(localStorageData),\n      });\n    }\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={[state, dispatch]}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import React, { useContext, useRef } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { ChatContext, SET_CHAT_MESSAGE_TEXT } from '../../context/ChatContext';\n\nconst Form = ({ createMessage }) => {\n  const [state, dispatch] = useContext(ChatContext);\n  const formRef = useRef();\n\n  const handleChange = event => {\n    dispatch({\n      type: SET_CHAT_MESSAGE_TEXT,\n      payload: event.target.value,\n    });\n  };\n\n  const handleKeyDown = event => {\n\n    // enter (submit) - NOT when using shift.\n    if (event.keyCode === 13 && !(event.keyCode === 13 && event.shiftKey)) {\n      event.preventDefault();\n\n      formRef.current.dispatchEvent(new Event('submit'));\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (state.backendChat.message !== '') {\n      createMessage({\n        variables: {\n          questionId: state.backendChat.questionId,\n          text: state.backendChat.message,\n          sentFrom: 'admin',\n        },\n      });\n\n      // Clear the input.\n      dispatch({\n        type: SET_CHAT_MESSAGE_TEXT,\n        payload: '',\n      });\n    }\n  };\n\n  return (\n    <div className=\"backend-form\">\n      <form onSubmit={handleSubmit} ref={formRef}>\n        <TextareaAutosize\n          minRows={2}\n          maxRows={5}\n          value={state.backendChat.message}\n          placeholder=\"Indtast din besked...\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          autoFocus\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import './index.css';\nimport React, { useContext } from 'react';\nimport { Mutation, Query } from 'react-apollo';\n\nimport GET_QUESTION_QUERY from '../../../shared/Apollo/query/getQuestion';\nimport GET_MESSAGES_QUERY from '../../../shared/Apollo/query/getMessages';\nimport CREATE_MESSAGE_MUTATION from '../../../shared/Apollo/mutation/createMessage';\nimport { ChatContext, RESET_CHAT } from '../../context/ChatContext';\n\nimport OfflineMessage from './OfflineMessage';\nimport ReadonlyMessage from './ReadonlyMessage';\nimport Bar from './Bar';\nimport MessageList from './MessageList';\nimport Actions from './actions';\nimport Form from './Form';\n\nconst ChatContainer = () => {\n  const myConsultantId =\n    window.Drupal &&\n    window.Drupal.settings &&\n    window.Drupal.settings.consultantId\n      ? window.Drupal.settings.consultantId.toString()\n      : '1';\n  const [state, dispatch] = useContext(ChatContext);\n\n  return (\n    <Query\n      query={GET_QUESTION_QUERY}\n      variables={{\n        questionId: state.backendChat.questionId,\n      }}\n    >\n      {({ data: {question}, loading, subscribeToMore }) => {\n        if (!question || loading) return '';\n\n        // The received question is marked as complete, so dispatch an action\n        // invalidating everything in the state.\n        if (question.status === 'complete') {\n          dispatch({\n            type: RESET_CHAT,\n            payload: null,\n          });\n        }\n\n        return (\n          <div className=\"backend-chat\">\n            <Bar name={question.authorName} email={question.authorEmail} source={question.source} />\n\n            <OfflineMessage lastHeartbeat={question.lastHeartbeatAt} />\n\n            {question.consultant !== myConsultantId && <ReadonlyMessage />}\n\n            <Query \n              query={GET_MESSAGES_QUERY}\n              variables={{ questionId: state.backendChat.questionId }}\n              fetchPolicy=\"network-only\"\n              pollInterval={2000}\n            >\n              {({ data: { messages }, loading }) => {\n                if (!messages) return null;\n\n                return (\n                  <MessageList\n                    author={question.authorName}\n                    subject={question.subject}\n                    questionCreatedAt={question.createdAt}\n                    messages={messages}\n                  />\n                );\n              }}\n            </Query>\n\n            {question.consultant === myConsultantId && (\n              <Mutation mutation={CREATE_MESSAGE_MUTATION} id={question.id}>\n                {createMessage => <Form questionId={question.id} createMessage={createMessage} />}\n              </Mutation>\n            )}\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\nexport default ChatContainer;\n","import React, { Fragment, useContext } from 'react';\n\nimport { ChatContext } from '../context/ChatContext';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nconst App = () => {\n  const [state] = useContext(ChatContext);\n\n  const renderChat = state.backendChat ? <Chat /> : '';\n\n  return (\n    <Fragment>\n      <Sidebar />\n      {renderChat}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport { ChatProvider } from './ChatContext';\nimport { SettingsProvider } from './SettingsContext';\n\nconst Store = ({ children }) => {\n  return (\n    <SettingsProvider>\n      <ChatProvider>\n        {children}\n      </ChatProvider>\n    </SettingsProvider>\n  );\n};\n\nexport default Store;\n","import React, { useContext, useEffect } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { SettingsContext } from '../context/SettingsContext';\nimport GET_SETTINGS_QUERY from '../../shared/Apollo/query/getSettings';\nimport { SET_SETTINGS } from '../context/SettingsContext';\n\nconst Settings = ({ children }) => (\n  <Query query={GET_SETTINGS_QUERY}>\n    {({ data, loading }) => {\n      if (!data || loading) return children;\n\n      return (\n        <SettingsSetter data={data} loading={loading}>\n          {children}\n        </SettingsSetter>\n      );\n    }}\n  </Query>\n);\n\nconst SettingsSetter = ({ children, data, loading }) => {\n  const [, dispatch] = useContext(SettingsContext);\n\n  useEffect(() => {\n    if (data && !loading) {\n      dispatch({\n        type: SET_SETTINGS,\n        payload: data.settings,\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return children;\n};\n\nexport default Settings;\n","import React from 'react';\n\nimport App from './components/App';\nimport Apollo from '../shared/Apollo';\nimport Store from './context/Store';\nimport Settings from './components/Settings';\n\nconst Index = () => (\n  <Apollo>\n    <Store>\n      <Settings>\n        <App />\n      </Settings>\n    </Store>\n  </Apollo>\n);\n\nexport default Index;\n","import 'core-js';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport getUrlParam from './shared/utils/getUrlParam';\nimport ClientChat from './clientChat';\nimport BackendChat from './backendChat';\n\n// Render only one.\nif (getUrlParam('renderOnly') !== '') {\n  if (getUrlParam('renderOnly') === 'backend') {\n    if (document.getElementById('chatty_backend')) {\n      ReactDOM.render(\n        <BackendChat />,\n        document.getElementById('chatty_backend'),\n      );\n    }\n  }\n\n  if (getUrlParam('renderOnly') === 'client') {\n    if (document.getElementById('chatty_client')) {\n      ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n    }\n  }\n} else {\n  if (document.getElementById('chatty_client')) {\n    ReactDOM.render(<ClientChat />, document.getElementById('chatty_client'));\n  }\n\n  if (document.getElementById('chatty_backend')) {\n    ReactDOM.render(<BackendChat />, document.getElementById('chatty_backend'));\n  }\n}\n"],"sourceRoot":""}