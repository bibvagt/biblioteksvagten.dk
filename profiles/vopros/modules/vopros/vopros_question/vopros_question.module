<?php

/**
 * @file
 */

include_once('vopros_question.features.inc');

/**
 * Implements hook_init().
 */
function vopros_question_init() {
  if (arg(0) == 'vopros' || arg(1) == 'vopros') {
    drupal_add_css(drupal_get_path('module', 'vopros_question') . '/theme/vopros_question.base.css');
    drupal_add_js(drupal_get_path('module', 'vopros_question') . '/js/vopros_question.base.js');
    drupal_add_js(drupal_get_path('module', 'vopros_question') . '/js/tooltip.js');
  }
}

/**
 * Implements hook_entity_info().
 */
function vopros_question_entity_info() {
  $return = array();

  $return['vopros_question'] = array(
    'label' => t('Question', array(), array('context' => 'a vopros question')),
    'plural label' => t('Questions', array(), array('context' => 'a vopros question')),
    'entity class' => 'VoprosQuestion',
    'controller class' => 'VoprosQuestionEntityController',
    'base table' => 'vopros_question',
    'revision table' => 'vopros_question_revision',
    'fieldable' => TRUE,
    'uri callback' => 'vopros_question_uri',
    'entity keys' => array(
      'id' => 'question_id',
      'revision' => 'revision_id',
    ),
    'bundles' => array(
      'vopros_question' => array(
        'label' => t('Question', array(), array('context' => 'a vopros question')),
        'admin' => array(
          'path' => 'admin/vopros/config/question',
          'access arguments' => array('administer questions'),
        ),
      ),
    ),
    'load hook' => 'vopros_question_load',
    'view modes' => array(
      'administrator' => array(
        'label' => t('Administrator'),
        'custom settings' => FALSE,
      ),
      'public' => array(
        'label' => t('Public'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
    'access callback' => 'vopros_question_access',
    'views controller class' => 'EntityDefaultViewsController',
  );

  $return['vopros_question_client'] = array(
    'label' => t('Client', array(), array('context' => 'a vopros question')),
    'plural label' => t('Clients', array(), array('context' => 'a vopros question')),
    'entity class' => 'VoprosQuestionClient',
    'controller class' => 'VoprosAPIEntityController',
    'base table' => 'vopros_question_client',
    'revision table' => 'vopros_question_client_revision',
    'fieldable' => TRUE,
    'uri callback' => 'vopros_question_client_uri',
    'entity keys' => array(
      'id' => 'client_id',
      'revision' => 'revision_id',
      'label' => 'label',
    ),
    'bundles' => array(
      'vopros_question_client' => array(
        'label' => t('Client', array(), array('context' => 'a vopros question')),
        'admin' => array(
          'path' => 'admin/vopros/config/client',
          'access arguments' => array('administer questions'),
        ),
      ),
    ),
    'load hook' => 'vopros_question_client_load',
    'view modes' => array(
      'default' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    // We need to define module so VoprosClientUIController can find the include
    // file, but when we do that entity_entity_property_info() checks the module
    // for a hook_entity_property_info() and assuems that it will supply the
    // entity properties. As we only implement hook_entity_property_info() to
    // adjust a few properties to the vopros_question entity, this results in no
    // properties for vopros_question_client. So we set the 'metadata controller
    // class' explicitly to the default.
    'module' => 'vopros_question',
    'metadata controller class' => 'EntityDefaultMetadataController',
    'access callback' => 'vopros_question_client_access',
    'views controller class' => 'EntityDefaultViewsController',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/vopros/clients',
      'file' => 'includes/vopros_question_client.admin.inc',
      'controller class' => 'VoprosClientUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function vopros_question_field_extra_fields() {
  $extra = array();

  $extra['vopros_question']['vopros_question'] = array(
    'form' => array(
      'question_title' => array(
        'label' => t('Question title'),
        'description' => t('The title of the question'),
        'weight' => -6,
      ),
      'question_content' => array(
        'label' => t('Question content'),
        'description' => t('The content of the question'),
        'weight' => -5,
      ),
      'question_deadline' => array(
        'label' => t('Deadline'),
        'description' => t('The deadline for the question'),
        'weight' => -4,
      ),
      'question_usage' => array(
        'label' => t('Usage'),
        'description' => t('The usage of the question'),
        'weight' => -3,
      ),
      'client_id' => array(
        'label' => t('Client'),
        'description' => t('The client that submitted the question'),
        'weight' => -2,
      ),
      'channel' => array(
        'label' => t('Channel'),
        'description' => t('The the channel that the client used'),
        'weight' => -1,
      ),
      'question_note' => array(
        'label' => t('Question note'),
        'description' => t('Internal note regarding the question'),
        'weight' => 0,
      ),
      'ask' => array(
        'label' => t('User data'),
        'description' => t('Data about the user asking the question'),
        'weight' => 1,
      ),
      'log' => array(
        'label' => t('Internal log'),
        'description' => t('Internal log about the question itself.'),
        'weight' => 2,
      ),
    ),
    'display' => array(
      'question_title' => array(
        'label' => t('Question title'),
        'description' => t('The title of the question'),
        'weight' => -9,
      ),
      'question_status' => array(
        'label' => t('Question status'),
        'description' => t('The status of the question and reason for status if possible'),
        'weight' => -8,
      ),
      'question_content' => array(
        'label' => t('Question content'),
        'description' => t('The content of the question'),
        'weight' => -7,
      ),
      'created' => array(
        'label' => t('Created'),
        'description' => t('When the question was created'),
        'weight' => -6,
      ),
      'question_deadline' => array(
        'label' => t('Deadline'),
        'description' => t('The deadline for the question'),
        'weight' => -5,
      ),
      'client' => array(
        'label' => t('Client'),
        'description' => t('The client that submitted the question'),
        'weight' => -4,
      ),
      'channel' => array(
        'label' => t('Channel'),
        'description' => t('The the channel that the client used'),
        'weight' => -3,
      ),
      'question_usage' => array(
        'label' => t('Usage'),
        'description' => t('The usage of the question'),
        'weight' => -2,
      ),
      'user_answer_preference' => array(
        'label' => t('Prefered answer method'),
        'weight' => -1,
      ),
      'question_note' => array(
        'label' => t('Question note'),
        'description' => t('Internal note regarding the question'),
        'weight' => 0,
      ),
      'ask' => array(
        'label' => t('User data'),
        'description' => t('Data about the user asking the question'),
        'weight' => 1,
      ),
      'log' => array(
        'label' => t('Internal log'),
        'description' => t('Internal log about the question itself.'),
        'weight' => 2,
      ),
      'buttons' => array(
        'label' => t('Buttons'),
        'description' => t('The various actions that can be taken.'),
        'weight' => 100,
      ),
    ),
  );

  drupal_alter('vopros_question_field_extra_fields', $extra);

  return $extra;
}


/**
 * Entity uri callback.
 */
function vopros_question_uri($question) {
  return array(
    'path' => 'admin/vopros/questions/' . $question->question_id,
  );
}

/**
 * Implements hook_enable().
 */
function vopros_question_enable() {
  // When the module is enabled, we need to make sure that the
  // menu is buildt correctly with the entity info.
  menu_rebuild();
  // Create the question vopros_question_subject_catagory vocabolary
  if (!taxonomy_vocabulary_machine_name_load('vopros_question_subject_catagory')) {
    $vocabulary = (object) array(
      'name' => t('Subject catagory'),
      'machine_name' => 'vopros_question_subject_catagory',
      'module' => 'vopros_question',
    );
    taxonomy_vocabulary_save($vocabulary);
  }
  vopros_question_configure_question();
}

/**
 * Implementation of hook_menu().
 */
function vopros_question_menu() {
  $items = array();

  // Question client settings page.
  $items['admin/vopros/config/client'] = array(
    'title' => 'Client settings',
    'description' => 'Configure general settings for clients, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_client_settings_form'),
    'access arguments' => array('administer questions'),
    'file' => 'includes/vopros_question_client.admin.inc',
  );

  $items['admin/vopros/config/client/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Question settings page.
  $items['admin/vopros/config/question'] = array(
    'title' => 'Question settings',
    'description' => 'Configure general question settings, fields, and displays.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_settings_form'),
    'access arguments' => array('administer questions'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/config/question/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Question adding and display pages.
  $items['admin/vopros/questions/add'] = array(
    'title' => 'Add a question',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_question_form', NULL),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('create'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/add-with-answer'] = array(
    'title' => 'Add a question with an answer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_question_form', NULL, TRUE),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('create'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question'] = array(
    'title callback' => 'vopros_question_title',
    'title arguments' => array(3),
    'page callback' => 'vopros_question_page_view',
    'page arguments' => array(3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('view'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Question editing pages.
  $items['admin/vopros/questions/%vopros_question/admin-edit'] = array(
    'title' => 'Admin edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_question_form', 3),
    'access arguments' => array('administer questions'),
    'file' => 'includes/vopros_question.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/vopros/questions/%vopros_question/edit'] = array(
    'title' => 'Edit question',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_question_frontend_form', 3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('update'),
    'file' => 'includes/vopros_question.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/vopros/questions/%vopros_question/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_revisions_form', 3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('revision'),
    'file' => 'includes/vopros_question.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/vopros/questions/%vopros_question/revisions/view'] = array(
    'title' => 'Diff',
    'page callback' => 'vopros_question_diffs_show',
    'page arguments' => array(3, 6, 7),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'vopros_question_access',
    'access arguments' => array('revision'),
    'tab_parent' => 'admin/vopros/questions/%/revisions',
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question/revisions/%vopros_question_revision/revert'] = array(
    'title' => 'Revert revision',
    'page callback' => 'vopros_question_revision_revert',
    'page arguments' => array(3, 5),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('revision'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question/close'] = array(
    'title' => 'Close',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_close_question_form', 3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('update'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question/notify'] = array(
    'title' => 'Notify user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_question_notify_user_form', 3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('notify'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  $items['admin/vopros/questions/%vopros_question/release'] = array(
    'title' => 'Release question',
    'page callback' => 'vopros_question_release_question',
    'page arguments' => array(3),
    'access callback' => 'vopros_question_access',
    'access arguments' => array('update'),
    'file' => 'includes/vopros_question.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function vopros_question_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/questions/add' on 'admin/commerce/questions'.
  if ($root_path == 'admin/vopros/questions') {
    $item = menu_get_item('admin/vopros/questions/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
    $item = menu_get_item('admin/vopros/questions/add-with-answer');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function vopros_question_permission() {
  $permissions = array(
    'administer questions' => array(
      'title' => t('Administer questions'),
      'restrict access' => TRUE,
    ),
    'access questions' => array(
      'title' => t('Access lists of questions, primarily for viewing and referencing'),
      'vopros roles' => array('staff'),
    ),
    'create questions' => array(
      'title' => t('Create questions'),
      'vopros roles' => array('staff'),
    ),
    'edit any question' => array(
      'title' => t('Edit any question'),
      'vopros roles' => array('staff'),
    ),
    'contact user about question' => array(
      'title' => t('Contact user about question'),
      'vopros roles' => array('staff'),
    ),
    'access and use revisions for questions' => array(
      'title' => t('Access and use revisions'),
    ),
    'notify user on question' => array(
      'title' => t('Assign a user a question or notify them about it'),
      'vopros roles' => array('staff'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_mail().
 */
function vopros_question_mail($key, &$message, $params) {
  if ($key == 'notify_user') {
    $message['subject'] = t('[@site] Question notification', array('@site' => variable_get('site_name', 'Vopros')));
    $message['body'][] = t('You have been notified about a question.');
    if ($params['message']) {
      $message['body'][] = $params['message'];
    }
    $message['body'][] = t('You can see the quesiton here: !link.', array('!link' => url('admin/vopros/questions/' . $params['question']->question_id, array('absolute' => TRUE))));
  }
}

/**
 * Checks question access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create',
 *   'delete' or 'revision'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_question_access($op, $question = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any question for administrators.
  if (user_access('administer questions', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
      // Grant view access to users with the administrative access questions
      // permission or to a user's own questions with the view own questions
      // permission.
      return user_access('access questions', $account);

    case 'create':
      return user_access('create questions', $account);

    case 'update':
    case 'delete':
      return user_access('edit any question', $account);

    case 'revision':
      return user_access('access and use revisions for questions', $account);

    case 'notify':
      return user_access('notify user on question', $account);

    case 'contact':
      if (user_access('contact user about question')) {
        if ($question && $question->question_status == 'assigned' && $question->uid != $account->uid) {
          return FALSE;
        }
        return TRUE;
      }
      break;
  }

  return FALSE;
}

/**
 * Title callback for questions
 */
function vopros_question_title($question) {
  return isset($question->question_title) && !empty($question->question_title) ? $question->question_title : t('New question');
}

/**
 * Create a new question object
 */
function vopros_question_new($values = array()) {
  $default_values = array(
    'question_status' => 'new',
    'question_title' => t('New question'),
    'question_content' => '',
    'question_deadline' => -1,
    'question_status_reason' => '',
    'user_age' => 'no inform',
    'client_id' => 0,
  );
  $values += $default_values;
  return entity_create('vopros_question', $values);
}

/**
 * Save a question
 *
 * @param $question
 *    The question object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_question_save($question, $revision = 1) {
  $question->revision = $revision;
  entity_save('vopros_question', $question);
}

/**
 * Loads an question by ID.
 */
function vopros_question_load($question_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $questions = vopros_question_load_multiple(array($question_id), $conditions, $reset);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Load a question by UUID.
 */
function vopros_question_load_by_uuid($uuid) {
  $questions = vopros_question_load_multiple(FALSE, array('uuid' => $uuid), FALSE);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Loads an revision of a question.
 */
function vopros_question_revision_load($revision_id) {
  $questions = vopros_question_load_multiple(FALSE, array('revision_id' => $revision_id), FALSE);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Validates the data for the question.
 */
function vopros_question_validate_data($question) {
  return entity_get_controller('vopros_question')->validateData($question);
}

/**
 * Get a list of revisions for a question.
 */
function vopros_question_revision_list($question) {
  $revisions = array();
  $result = db_query("SELECT q.revision_id, q.revision_uid, q.uid, q.question_title, q.question_content, q.question_note, q.question_status, q.question_usage, q.log, q.revision_timestamp, u.name FROM {vopros_question_revision} AS q
                      LEFT JOIN {users} AS u ON q.revision_uid = u.uid
                      WHERE q.question_id = :question_id
                      ORDER BY -q.revision_id", array(':question_id' => $question->question_id));
  foreach ($result as $revision) {
    $revisions[$revision->revision_id] = $revision;
  }
  return $revisions;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_question} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal question loading cache.
 *
 * @return
 *   An array of question objects indexed by question_id.
 */
function vopros_question_load_multiple($question_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_question', $question_ids, $conditions, $reset);
}

/**
 * Checks client access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create',
 *   'delete' or 'revision'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_question_client_access($op, $question = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any client for administrators.
  if (user_access('administer questions', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access questions permission
  // or to a user's own questions with the view own questions permission.
  if ($op == 'view') {
    if (user_access('access questions', $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Loads client by ID.
 */
function vopros_question_client_load($client_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $clients = vopros_question_client_load_multiple(array($client_id), $conditions, $reset);
  return $clients ? reset($clients) : FALSE;
}

/**
 * Loads multiple clients by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $client_ids
 *   An array of client IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_question_client} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal question loading cache.
 *
 * @return
 *   An array of client objects indexed by client_id.
 */
function vopros_question_client_load_multiple($client_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_question_client', $client_ids, $conditions, $reset);
}

/**
 * Loads a client by agency.
 */
function vopros_question_client_load_by_agency($agency, $reset = FALSE) {
  $conditions = array(
    'agency' => $agency,
  );
  $clients = vopros_question_client_load_multiple(FALSE, $conditions, $reset);
  return $clients ? reset($clients) : FALSE;
}

/**
 * Implement hook_form_alter().
 */
function vopros_question_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['#action'] = '';
      $form['#submit'][] = 'vopros_question_user_login_submit';
      break;
  }
}

/**
 * Implements hook_views_pre_render()
 */
function vopros_question_form_views_exposed_form_alter(&$form, &$form_state) {
  // Since we can't set questions to have the open status, we set it, if no get params are set.
  $view = $form_state['view'];
  if ($view->name == 'vopros_question_list' && $view->current_display == 'page' && empty($_GET['question_status'])) {
    $form_state['input']['question_status'] = 'open';
  }
}

function vopros_question_user_login_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/list';
}

/**
 * Implements hook_entity_property_info().
 */
function vopros_question_entity_property_info() {
  $info = array();

  // Add meta-data about the basic question properties.
  $properties = &$info['vopros_question']['properties'];

  $properties['user'] = array(
    'label' => t('Question answerer'),
    'type' => 'user',
    'description' => t('The uid of the user answering the question.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('uid'),
    'schema field' => 'users',
  );

  $properties['question_url'] = array(
    'label' => t('Question URL'),
    'type' => 'uri',
    'description' => t("The URL of the question page."),
    'getter callback' => 'vopros_question_get_properties',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vopros_question_entity_property_info_alter(&$info) {
  // Need to clear the question cache when the question_id is altered.
  $info['vopros_question']['properties']['uid']['clear'] = array('user');

  // The enitity module has populated properties by looking at the schema.
  // Improve on it guesses at field types.
  $properties = &$info['vopros_question']['properties'];
  $properties['question_deadline_timestamp'] = array(
    'label' => t("Deadline"),
    'type' => 'date',
    'schema field' => 'question_deadline_timestamp',
    'description' => t("The deadline for answering the question."),
  );

  $properties['created'] = array(
    'label' => t("Date asked"),
    'type' => 'date',
    'description' => t("The date the question was submitted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the question was most recently updated."),
  );
}

/**
 * Implements hook_vopros_question_channels().
 */
function vopros_question_vopros_question_channels() {
  return array(
    'telephone' => array(
      'name' => t('Telephone'),
      'manual' => TRUE,
    ),
  );
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_question_views_data_alter(&$data) {
  // Add relationships to other tables.
  $data['vopros_question']['uid'] = array(
    'title' => 'Question owner',
    'help' => 'Question uid',
    'field' => array(
      'field' => 'uid',
      'handler' => 'views_handler_field_user',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_user_uid',
      'name field' => 'name', // display this field in the summary
    ),
    'filter' => array(
      'title' => t('Question owner'),
      'handler' => 'views_handler_filter_user_name',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'field' => 'uid',
      'label' => 'user',
    ),
  );

  $data['vopros_question']['client_id']['title'] = 'Question client';
  $data['vopros_question']['client_id']['filter']['handler'] = 'vopros_question_client_views_handler_filter_in_operator';
  $data['vopros_question']['client_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question_client',
    'field' => 'client_id',
    'label' => 'Question client',
  );

  $data['vopros_question']['revision_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question_revision',
    'field' => 'revision_id',
    'label' => 'Question revision',
  );

  // Add custom handlers for select fields.
  $data['vopros_question']['user_age']['field']['handler'] =
  $data['vopros_question']['question_status']['field']['handler'] =
  $data['vopros_question']['user_answer_preference']['field']['handler'] =
  $data['vopros_question']['client_id']['field']['handler'] =
  $data['vopros_question']['question_usage']['field']['handler'] = 'vopros_question_handler_field_vopros_question';
  $data['vopros_question']['question_deadline_timestamp']['field']['handler'] = 'vopros_question_handler_field_date';

  $data['vopros_question']['question_usage']['argument']['handler'] =
  $data['vopros_question']['question_usage']['filter']['handler'] = 'vopros_question_usage_views_handler_filter_in_operator';

  $data['vopros_question']['question_status']['argument']['handler'] =
  $data['vopros_question']['question_status']['filter']['handler'] = 'vopros_question_status_views_handler_filter_in_operator';

  $data['vopros_question']['user_answer_preference']['filter']['handler'] = 'vopros_question_user_answer_preference_views_handler_filter';


  // Add revision table.
  $data['vopros_question_revision'] = $data['vopros_question'];
  $data['vopros_question_revision']['table'] = array(
    'group' => 'Question revisions',
    'base' => array(
      'field' => 'revision_id',
      'title' => 'Question revisions',
      'help' => '',
    ),
  );
  // Add revision uid.
  $data['vopros_question_revision']['revision_uid'] = $data['vopros_question_revision']['uid'];
  unset($data['vopros_question_revision']['revision_id']['relationship']);

  $data['vopros_question_revision']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'Question',
  );

  $data['vopros_question']['release_link'] = array(
    'field' => array(
      'title' => t('Release question link'),
      'help' => t('Creates a link for releasing a question assigned to a user.'),
      'handler' => 'vopros_question_handler_field_vopros_quesiton_release_link',
    ),
  );
}

/**
 * Configure the vopros email entity with fields.
 */
function vopros_question_configure_question() {
  $type = 'vopros_question';
  $bundle = 'vopros_question';

  // Create a taxonomy term reference field
  $field_name = 'subject_catagory';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => -1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'assigned' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'vopros_question_subject_catagory',
            'parent' => 0,
          ),
        ),
      ),
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('Subject'),
      'widget' => array(
        'type' => 'options_buttons',
      ),
      'settings' => array(),

      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Create a file field for attachments.
  $field_name = 'vopros_question_attachment';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => -1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'assigned' => TRUE,
      'field_name' => $field_name,
      'type' => 'file',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'weight' => 0,
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('File attachments'),
      'widget' => array(
        'type' => 'file_generic',
        'settings' => array(
          'progress_indicator' => 'throbber',
        ),
      ),
      'settings' => array(
        'file_directory' => 'vopros_question',
        'file_extensions' => 'txt gif png jpg jpeg pdf doc docx',
      ),

      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'file_default',
          'settings' => array(),
          'module' => 'file',
          'weight' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Builds a structured array representing the questions' content.
 */
function vopros_question_build_content($question, $view_mode = 'administrator', $langcode = NULL) {
  $question->content = array();
  field_attach_prepare_view('vopros_question', array($question->question_id => $question), $view_mode);
  entity_prepare_view('vopros_question', array($question->question_id => $question));
  $question->content = field_attach_view('vopros_question', $question, $view_mode, $langcode);
  // Add extra fields
  $question->content['question_title'] = array(
    '#theme' => 'vopros_question_title',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_content'] = array(
    '#theme' => 'vopros_question_content',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_deadline'] = array(
    '#theme' => 'vopros_question_deadline',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_usage'] = array(
    '#theme' => 'vopros_question_usage',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['client'] = array(
    '#theme' => 'vopros_client',
    '#question' => $question,
    '#client' => vopros_question_client_load($question->client_id),
    '#view_mode' => $view_mode,
  );
  $question->content['channel'] = array(
    '#theme' => 'vopros_channel',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['user_answer_preference'] = array(
    '#theme' => 'vopros_question_user_answer_preference',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_note'] = array(
    '#theme' => 'vopros_question_note',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['ask'] = array(
    '#theme' => 'vopros_question_user_data',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['log'] = array(
    '#theme' => 'vopros_question_log',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['created'] = array(
    '#theme' => 'vopros_question_created',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_status'] = array(
    '#theme' => 'vopros_question_status',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );

  if ($view_mode == 'administrator') {
    $cloned_question = clone($question);
    unset($cloned_question->content);
    $feed = array();
    // Handle invoking the hook ourself, as we need to pass by reference.
    $hook = 'vopros_question_activity_feed';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      if (function_exists($function)) {
        $function($cloned_question, $feed);
      }
    }
    $question->content['feed'] = $feed;
  }

  $question->content['buttons'] = drupal_get_form('vopros_question_handle_question_form', $question);

  module_invoke_all('entity_view', $question, 'vopros_question', $view_mode, $langcode);

}

/**
 * Utility function to get the question usage options
 */
function _vopros_question_usage() {
  return array(
    'business' => t('Business'),
    'other' => t('Other'),
    'personal' => t('Personal'),
    'school1' => t('Assignment for groundschool'),
    'school2' => t('Assignment for highschool'),
    'school3' => t('Assignment for college education'),
    'school4' => t('Assignment for university education or research'),
  );
}

/**
 * Returns the possible answer methods.
 */
function _vopros_question_user_answer_preference() {
  return module_invoke_all('vopros_question_user_answer_preference');
}

/**
 * Returns the suitable answer methods when creating question
 * manually.
 *
 * @todo bit of a wart.
 */
function _vopros_question_create_user_answer_preference() {
  $methods = _vopros_question_user_answer_preference();
  unset($methods['chat'], $methods['vopros_service']);
  unset($methods['chatty'], $methods['vopros_service']);
  return $methods;
}

/**
 * Implements hook_vopros_question_user_answer_preference().
 */
function vopros_question_vopros_question_user_answer_preference() {
  return array(
    'telephone' => t('Telephone'),
  );
}

/**
 * Utility function to get the question usage options
 */
function _vopros_question_deadline() {
  return array(
    -1 => t('No deadline'),
    2 => t('2 hours'),
    24 => t('1 day'),
    168 => t('1 week'),
  );
}

/**
 * Utility function to get the question user age options.
 */
function _vopros_question_user_age() {
  return array(
    '0 - 14 years' => t('0 - 14 years'),
    '15 - 19 years' => t('15 - 19 years'),
    '20 - 25 years' => t('20 - 25 years'),
    '26 - 45 years' => t('26 - 45 years'),
    '46 - 65 years' => t('46 - 65 years'),
    '66 +' => t('66 +'),
    'no inform' => t('Doesn\'t want to inform'),
  );
}

/**
 * Get the possible gender options.
 */
function _vopros_question_user_gender() {
  return array(
    'm' => t('Male'),
    'f' => t('Female'),
  );
}

/**
 * Utility function to get the question status options.
 */
function _vopros_question_status() {
  return array(
    'new' => t('New'),
    'active' => t('Active'),
    'assigned' => t('Assigned'),
    'answered' => t('Answered'),
    'closed' => t('Closed without answer'),
  );
}

/**
 * Utility function to get the question status reason options.
 */
function _vopros_question_status_reason() {
  $reasons = array(
    'spam' => t('Spam'),
    'problem question' => t('Problem question'),
    'already answered' => t('Already answered'),
    'already published' => t('Already published'),
    'ask for email' => t('Ask for email'),
    'need more info' => t('Need more info'),
    'message for user' => t('Message for user'),
    'no time for deadline' => t('Not enough time for deadline'),
    'created from email' => t('Created from received email'),
    'reactivated by email' => t('Reactivated by email'),
    'reopened by user' => t('Reopened by user'),
    'locked for answering' => t('Locked for answering'),
    'released' => t('Released'),
    'no contact info' => t('No contact info'),
  );

  drupal_alter('vopros_question_status_reasons', $reasons);

  return $reasons;
}

/**
 * Get the possible clients as an options array.
 */
function _vopros_question_client_options() {
  return db_select('vopros_question_client', 'vqc')
    ->fields('vqc', array('client_id', 'label'))
    ->execute()
    ->fetchAllKeyed();
}

/**
 * Get manual channels as an option array.
 */
function _vopros_question_manual_channels() {
  $manual_channels = array();
  foreach (vopros_question_channels() as $name => $channel) {
    if (!empty($channel['name']) && isset($channel['manual']) && $channel['manual']) {
      $manual_channels[$name] = $channel['name'];
    }
  }

  return $manual_channels;
}

/**
 * Get known channels.
 */
function vopros_question_channels() {
  $channels = &drupal_static(__FUNCTION__, NULL);
  if (is_null($channels)) {
    $channels = module_invoke_all('vopros_question_channels');
  }

  return $channels;
}

/**
 * Get a channel definition.
 */
function vopros_question_channel($name) {
  $channels = vopros_question_channels();
  return isset($channels[$name]) ? $channels[$name] : FALSE;
}

/**
 * Render channel data.
 *
 * @param object $question
 *   Question to render channel data for.
 *
 * @return null|string
 *   The rendered data or NULL if empty.
 */
function vopros_question_channel_data_render($question) {
  if (empty($question->channel_data)) {
    return NULL;
  }

  $channel = vopros_question_channel($question->channel);

  if (isset($channel['data render']) && function_exists($channel['data render'])) {
    $function = $channel['data render'];
    $rendered = $function($question->channel_data, $question);
  }
  else {
    // Fall back to var_export.
    $rendered = var_export($question->channel_data, TRUE);
  }

  return $rendered;
}

/**
 * Implements hook_theme().
 */
function vopros_question_theme() {
  $path = drupal_get_path('module', 'vopros_question') . '/theme';
  return array(
    'vopros_question' => array(
      'render element' => 'elements',
      'template' => 'vopros-question',
      'path' => $path,
      'file' => 'vopros_question.theme.inc',
    ),
    'vopros_question_status' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_title' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_content' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_deadline' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_usage' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_client' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_channel' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_user_data' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_user_credentials' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_note' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_log' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_created' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_revision_question_feed' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_user_answer_preference' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Form to handle processing a question.
 */
function vopros_question_handle_question_form($form, &$form_state, $question) {
  $form['question'] = array(
    '#type' => 'value',
    '#value' => $question,
  );

  $form['actions'] = array('#type' => 'actions');
  // If the question is locked for answering, don't allow any action.
  if ($question->question_status == 'assigned') {
    global $user;
    if ($question->uid == $user->uid || user_access('administer questions')) {
      $form['release_question'] = array(
        '#type' => 'submit',
        '#value' => t('Release question'),
        '#submit' => array('vopros_question_handle_question_form_release_submit'),
      );
    }
    return $form;
  }
  // The question is closed, make it possible to open
  if (in_array($question->question_status, array('answered', 'closed'))) {
    $form['actions']['open'] = array(
      '#type' => 'submit',
      '#value' => t('Open question'),
      '#submit' => array('vopros_question_handle_question_form_open_submit'),
    );
  }
  // The question is open, make it possible to close it
  else {
    $form['actions']['contact'] = array(
      '#type' => 'submit',
      '#value' => t('Contact user'),
    );

    $form['actions']['close'] = array(
      '#type' => 'submit',
      '#value' => t('Close question'),
      '#submit' => array('vopros_question_handle_question_form_close_submit'),
    );

    $form['actions']['notify'] = array(
      '#type' => 'submit',
      '#value' => t('Notify librarian'),
      '#submit' => array('vopros_question_handle_question_form_notify_submit'),
      '#weight' => 3,
      '#access' => user_access('notify user on question'),
    );
  }
  $form['actions']['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit question'),
    '#submit' => array('vopros_question_handle_question_form_edit_submit'),
    '#weight' => 5,
  );

  return $form;
}

/**
 * Submit handler for vopros_question_handle_question_form edit action.
 */
function vopros_question_handle_question_form_edit_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/edit';
}

/**
 * Submit handler for vopros_question_handle_question_form close action.
 */
function vopros_question_handle_question_form_close_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/close';
}

/**
 * Submit handler for vopros_question_handle_question_form close action.
 */
function vopros_question_handle_question_form_notify_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/notify';
}

/**
 * Submit handler for vopros_question_handle_question_form release action.
 */
function vopros_question_handle_question_form_release_submit(&$form, &$form_state) {
  $question = $form['question']['#value'];
  $question->uid = 0;
  $question->question_status = 'active';
  $question->question_status_reason = 'released';
  $question->save();
  $form_state['redirect'] = 'admin/vopros/questions/list';
}

/**
 * Submit handler for vopros_question_handle_question_form open action.
 */
function vopros_question_handle_question_form_open_submit(&$form, &$form_state, $alter = TRUE) {
  $question = $form['question']['#value'];
  $question->question_status = 'active';
  $question->question_status_reason = 'reopened by user';
  $question->save();
  drupal_set_message(t("Question has been reopened"));
}

/**
 * Get possible reasons for question state.
 *
 * @param string $type
 *   the state for reasons.
 * @param bool $alter
 *   whether to let modules alter the reasons.
 */
function vopros_question_get_reasons($type = 'contact_mail', $alter = TRUE) {
  switch ($type) {
    case 'close':
      $options = array(
        'spam' => t('Spam'),
        'problem question' => t('Problem question'),
        'answered' => t('Already answered'),
        'no contact info' => t('No contact info'),
      );
     break;
    case 'contact_sms':
      $options = array(
        'ask for email' => t('Ask for email'),
        'need more info' => t('Need more info'),
        'no time for deadline' => t('Not enough time for deadline'),
        'message for user' => t('Message for user'),
      );
      break;
    case 'contact_mail':
    default:
      $options = array(
        'need more info' => t('Need more info'),
        'no time for deadline' => t('Not enough time for deadline'),
        'message for user' => t('Message for user'),
      );
  }

  $options = variable_get('vopros_question_status_reason_' . $type, $options);
  if ($alter) {
    drupal_alter('vopros_question_status_reason_options', $type, $options);
  }

  return $options;
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_question_vopros_question_activity_feed($question, &$feed) {
  $query = db_select('vopros_question_revision', 'v');
  $revisions = $query
    ->fields('v', array('revision_uid', 'question_status', 'question_status_reason', 'revision_timestamp', 'revision_id', 'question_id'))
    ->condition('question_id', $question->question_id, '=')
    ->orderBy('revision_timestamp', 'ASC')
    ->execute()
    ->fetchAll();
  $changes = array();

  $status = $revisions[0]->question_status;
  $reason = $revisions[0]->question_status_reason;

  foreach ($revisions as $revision) {

    if ($revision->question_status != $status || $revision->question_status_reason != $reason) {
      $feed['question_revision_' . $revision->revision_id] = array(
        '#theme' => 'vopros_question_revision_question_feed',
        '#revision' => $revision,
        '#weight' => - $revision->revision_timestamp,
      ) ;

      $status = $revision->question_status;
      $reason = $revision->question_status_reason;
    }
  }
}

function vopros_question_get_properties($question, array $options, $name, $entity_type) {
  switch ($name) {
    case 'question_url':
      if (empty($question->question_id)) {
        return NULL;
      }
      $return = entity_uri('vopros_question', $question);
      return $return ? url($return['path'], $return['options'] + $options) : '';
      break;
  }
}
