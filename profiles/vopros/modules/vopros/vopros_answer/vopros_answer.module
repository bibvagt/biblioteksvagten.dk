<?php

/**
 * @file
 */

include_once('vopros_answer.features.inc');

/**
 * Implementation of hook_init().
 */
function vopros_answer_init() {
  drupal_add_css(drupal_get_path('module', 'vopros_answer') . '/theme/vopros_answer.base.css');
}

/**
 * Implements hook_entity_info().
 */
function vopros_answer_entity_info() {
  $return = array(
    'vopros_answer' => array(
      'label' => t('Answer', array(), array('context' => 'a vopros answer')),
      'plural label' => t('Answers', array(), array('context' => 'a vopros answer')),
      'controller class' => 'VoprosAnswerEntityController',
      'entity class' => 'VoprosAnswer',
      'base table' => 'vopros_answer',
      'revision table' => 'vopros_answer_revision',
      'fieldable' => TRUE,
      'label callback' => 'vopros_answer_entity_label_callback',
      'entity keys' => array(
        'id' => 'answer_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_answer' => array(
          'label' => t('Question', array(), array('context' => 'a vopros answer')),
          'admin' => array(
            'path' => 'admin/vopros/config/answer',
            'access arguments' => array('administer answers'),
          ),
        ),
      ),
      'load hook' => 'vopros_answer_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'public' => array(
          'label' => t('Public'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_answer_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function vopros_answer_entity_property_info() {
  $info = array();

  // Add meta-data about the basic answer properties.
  $properties = &$info['vopros_answer']['properties'];

  $properties['question'] = array(
    'label' => t('Question'),
    'type' => 'vopros_question',
    'description' => t('The unique ID of the question the answer belongs to.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('question_id'),
    'schema field' => 'vopros_question',
  );

  $properties['user'] = array(
    'label' => t('Answer owner'),
    'type' => 'user',
    'description' => t('The uid of the user creating the answer.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('uid'),
    'schema field' => 'users',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vopros_answer_entity_property_info_alter(&$info) {
  // Need to clear the question cache when the question_id is altered.
  $info['vopros_answer']['properties']['question_id']['clear'] = array('question');
  $info['vopros_answer']['properties']['uid']['clear'] = array('user');

  // The enitity module has populated properties by looking at the schema.
  // Improve on it guesses at field types.
  $properties = &$info['vopros_answer']['properties'];

  $properties['created'] = array(
    'label' => t("Date asked"),
    'type' => 'date',
    'description' => t("The date the question was submitted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the question was most recently updated."),
  );
}

/**
 * Implements hook_enable().
 */
function vopros_answer_enable() {
  // When the module is enabled, we need to make sure that the
  // menu is buildt correctly with the entity info.
  menu_rebuild();
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_answer_views_data_alter(&$data) {
  // Uid field on answers.
  $data['vopros_answer']['uid'] = array(
    'title' => 'Answer owner',
    'help' => 'The user that owns the answer',
    'field' => array(
      'field' => 'uid',
      'handler' => 'views_handler_field_user',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_user_uid',
      'name field' => 'name', // display this field in the summary
    ),
    'filter' => array(
      'title' => t('User given feedback'),
      'handler' => 'views_handler_filter_user_name',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'field' => 'uid',
      'label' => 'user',
    ),
  );

  $data['vopros_answer']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'question',
  );

  $data['vopros_answer']['uid']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'users',
    'field' => 'uid',
    'label' => 'user',
  );

  $data['vopros_answer']['revision_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_answer_revision',
    'field' => 'revision_id',
    'label' => 'Answer revision',
  );

  $data['vopros_answer']['answer_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_answer_revision',
    'base field' => 'answer_id',
    'field' => 'answer_id',
    'label' => 'Answer revisions',
  );

  // Add own questions.
  $data['vopros_question']['own_questions'] = array(
    'title' => t('Own questions'),
    'help' => t('Display a table with a users own questions.'),
    'area' => array(
      'handler' => 'vopros_answer_area_own_questions',
    ),
  );

  $data['vopros_question']['views_count'] = array(
    'title' => t('Views Count'),
    'help' => t('Display the number of results for the view.'),
    'area' => array(
      'handler' => 'vopros_answer_area_views_count',
    ),
  );

  // Add revision table.
  $data['vopros_answer_revision'] = $data['vopros_answer'];
  $data['vopros_answer_revision']['table'] = array(
    'group' => 'Answer revisions',
    'base' => array(
      'field' => 'revision_id',
      'title' => 'Answer revisions',
      'help' => '',
    ),
  );

  $data['vopros_answer_revision']['uid']['title'] = t('Answer revision creator');

  $data['vopros_answer_revision']['answer_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_answer',
    'field' => 'answer_id',
    'label' => 'Answer',
  );

  $data['vopros_answer_revision']['revision_timestamp'] = $data['vopros_answer_revision']['created'];
  unset($data['vopros_answer_revision']['created']);
  unset($data['vopros_answer_revision']['changed']);
  $data['vopros_answer_revision']['revision_timestamp']['title'] = t('Revision timestamp');
  $data['vopros_answer_revision']['revision_timestamp']['field']['real field'] = 'revision_timestamp';
  $data['vopros_answer_revision']['revision_timestamp']['sort']['real field'] = 'revision_timestamp';
  $data['vopros_answer_revision']['revision_timestamp']['filter']['real field'] = 'revision_timestamp';
  $data['vopros_answer_revision']['revision_timestamp']['argument']['real field'] = 'revision_timestamp';
}

/**
 * Label callback for the vopros_answer entity
 */
function vopros_answer_entity_label_callback($entity) {
  return 'label';
}

/**
 * Implementation of hook_menu().
 */
function vopros_answer_menu() {
  return array(
    'admin/vopros/config/answer' => array(
      'title' => 'Answer settings',
      'description' => 'Configure general answer settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_answer_settings_form'),
      'access arguments' => array('administer answers'),
      'file' => 'includes/vopros_answer.admin.inc',
    ),
    'admin/vopros/config/answer/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/questions/%vopros_question/new-answer' => array(
      'title' => 'Answer question',
      'page callback' => 'vopros_answer_answer_page',
      'page arguments' => array(3, vopros_answer_new()),
      'access callback' => 'vopros_answer_question_access',
      'access arguments' => array('update', 3),
      'file' => 'includes/vopros_answer.admin.inc',
    ),
    'admin/vopros/answers/%vopros_answer/edit' => array(
      'title' => 'Edit answer',
      'page callback' => 'vopros_answer_answer_page',
      'page arguments' => array('', 3),
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('update', 3),
      'file' => 'includes/vopros_answer.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/answers/%vopros_answer/revisions' => array(
      'title' => 'Revisions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_answer_revisions_form', 3),
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('revision'),
      'file' => 'includes/vopros_answer.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/answers/%vopros_answer/revisions/view' => array(
      'title' => 'Diff',
      'page callback' => 'vopros_answer_diffs_show',
      'page arguments' => array(3, 6, 7),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('revision'),
      'tab_parent' => 'admin/vopros/answerss/%/revisions',
      'file' => 'includes/vopros_answer.admin.inc',
    ),
    'admin/vopros/answers/%vopros_answer/revisions/%vopros_answer_revision/revert' => array(
      'title' => 'Revert revision',
      'page callback' => 'vopros_answer_revision_revert',
      'page arguments' => array(3, 5),
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('revision'),
      'file' => 'includes/vopros_answer.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function vopros_answer_permission() {
  $permissions = array(
    'administer answers' => array(
      'title' => t('Administer answers'),
      'restrict access' => TRUE,
      'vopros roles' => array('staff'),
    ),
    'access answers' => array(
      'title' => t('Access lists of answers, primarily for viewing and referencing'),
      'vopros roles' => array('staff'),
    ),
    'create answers' => array(
      'title' => t('Create answers'),
      'vopros roles' => array('staff'),
    ),
    'edit any answer' => array(
      'title' => t('Edit any answer'),
      'restrict access' => TRUE,
      'vopros roles' => array('staff'),
    ),
    'edit own answers' => array(
      'title' => t('Edit own answers'),
      'vopros roles' => array('staff'),
    ),
    'view own answers' => array(
      'title' => t('View own answers'),
      'vopros roles' => array('staff'),
    ),
    'access and use revisions for answers' => array(
      'title' => t('Access and use revisions'),
    )
  );

  return $permissions;
}

/**
 * Initialize a new answer.
 */
function vopros_answer_new($values = array()) {
  if (isset($values['question_id'])) {
    $values['question'] = $values['question_id'];
  }
  // During installation, the entity might not be available for menu item.
  // So we need to create a fake entity in that case.
  if (!entity_get_info('vopros_answer')) {
    return new stdClass();
  }
  return entity_create('vopros_answer', $values);
}
/**
 * Save a question
 *
 * @param $answer
 *    The answer object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_answer_save($answer, $revision = 1) {
  $answer->revision = $revision;
  entity_save('vopros_answer', $answer);
}

/**
 * Loads an answer by ID.
 */
function vopros_answer_load($answer_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $answers = vopros_answer_load_multiple(array($answer_id), $conditions, $reset);
  return $answers ? reset($answers) : FALSE;
}

/**
 * Loads an revision of a question.
 */
function vopros_answer_revision_load($revision_id) {
  $answers = vopros_answer_load_multiple(array(), array('revision_id' => $revision_id), FALSE);
  return $answers ? reset($answers) : FALSE;
}

/**
 * Implements hook_entity_insert().
 */
function vopros_answer_entity_insert($entity, $type) {
  // Create an empty answer for every question created.
  if ($type == 'vopros_question') {
    $answer = vopros_answer_new(array('question_id' => $entity->question_id));
    vopros_answer_save($answer);
  }
}

/**
 * Loads multiple answers by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $answer_ids
 *   An array of answer IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_answer} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal answer loading cache.
 *
 * @return
 *   An array of answer objects indexed by answer_id.
 */
function vopros_answer_load_multiple($answer_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_answer', $answer_ids, $conditions, $reset);
}

/**
 * Load all answers for a question.
 *
 * @param $question_id
 *  The id of the question which answers should be fetched.
 */
function vopros_answer_load_for_question($question_id) {
  return vopros_answer_load_multiple(FALSE, array('question_id' => $question_id));
}

/**
 * Get a list of revisions for a question.
 */
function vopros_answer_revision_list($answer) {
  $revisions = array();
  $result = db_query("SELECT a.revision_id, a.revision_uid, a.revision_timestamp, a.log, a.uid, a.status, a.answer_content FROM {vopros_answer_revision} AS a
                      WHERE a.answer_id = :answer_id
                      ORDER BY -a.revision_id", array(':answer_id' => $answer->answer_id));
  foreach ($result as $revision) {
    $revisions[$revision->revision_id] = $revision;
  }
  return $revisions;
}

/**
 * Implements hook_enyity_view_alter().
 */
function vopros_answer_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'vopros_question' && $view_mode == 'administrator') {
    $question = $entity;
    if ($question->question_status == 'new') {
      $entity->content['right']['answer_form'] = drupal_get_form('vopros_answer_question_view_form', $question);
    }
    elseif ($question->question_status == 'assigned') {
      global $user;
      if ($question->uid == $user->uid || user_access('administer answers')) {
        $answers = vopros_answer_load_for_question($question->question_id);
        if ($answers) {
        }
        else {
          $entity->content['right']['answer_form'] = drupal_get_form('vopros_answer_question_view_form', $question);
        }
      }
    }
    elseif ($question->question_status == 'active') {
      $entity->content['right']['answer_form'] = drupal_get_form('vopros_answer_question_view_form', $question);
    }
    if (isset($entity->content['right']['answer_form'])) {
      $entity->content['right']['answer_form']['#weight'] = -100;
    }
  }
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_answer_vopros_question_activity_feed($question, &$feed) {
  $answers = vopros_answer_load_multiple(FALSE, array('question_id' => $question->question_id));
  foreach ($answers as $answer_id => $answer) {
    if (trim($answer->answer_content)) {
      $feed['answer_header'] = array(
        '#weight' => -pow(10, 15),
        '#markup' => '<h2 class="answer-header">' . t('Answers:') . '</h2>',
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'vopros_answer') . '/js/vopros_answer.question_feed.js'),
        ),
      );
      $answer_text = explode("\n", trim($answer->answer_content));

      $output_intro = array_slice($answer_text, 0, 5);
      $output_rest = array_slice($answer_text, 5);

      $feed['answer' . $answer_id] = array(
        '#prefix' => '<div class="vopros-answer">',
        '#suffix' => '</div>',
        // Make answers float to the top.
        '#weight' => -pow(10, 14) - $answer->created,
      );

      $feed['answer' . $answer_id]['intro'] = array(
        '#markup' => implode('', $output_intro),
      );

      if ($output_rest) {
        $feed['answer' . $answer_id]['link'] = array(
          '#markup' => '<div class="see-more">' . t('See more') . '</div>',
        );

        $feed['answer' . $answer_id]['rest'] = array(
          '#prefix' => '<div class="rest">',
          '#suffix' => '</div>',
          '#markup' => implode('<br />', $output_rest),
        );
      }
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_answer_form_vopros_question_handle_question_form_alter(&$form, &$form_state) {
  $question = $form['question']['#value'];
  if (in_array($question->question_status, array('new', 'active')) || $question->uid == $GLOBALS['user']->uid) {
    $answers = vopros_answer_load_for_question($question->question_id);
    $label = t('Answer question');
    foreach ($answers as $answer) {
      if (trim($answer->answer_content)) {
        $label = t('Edit answer');
      }
    }
    $form['actions']['answer_question'] = array(
      '#type' => 'submit',
      '#value' => $label,
      '#validate' => array('vopros_answer_question_view_form_validate'),
      '#submit' => array('vopros_answer_question_view_form_submit'),
      '#weight' => -10,
      '#attributes' => array('class' => array('primary-action')),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_answer_form_vopros_question_question_frontend_form_alter(&$form, &$form_state) {
  $form['form']['buttons']['save_and_answer'] = array(
    '#value' => t('Save and answer'),
    '#type' => 'submit',
    '#submit' => array('vopros_question_question_form_submit', 'vopros_answer_question_view_form_submit'),
  );
}

/**
 * Implements hook_views_pre_render()
 */
function vopros_answer_form_views_exposed_form_alter(&$form, &$form_state) {
  // Since we can't set questions to have the open status, we set it, if no get params are set.
  $view = $form_state['view'];
  if ($view->name == 'vopros_answer_overview' && $view->current_display == 'page' && !isset($_GET['uid'])) {
    global $user;
    $form_state['input']['uid'] = $user->name;
  }
}

/**
 * Form to answer questions
 */
function vopros_answer_question_view_form($form, &$form_state, $question) {
  $form['question'] = array(
    '#type' => 'value',
    '#value' => $question
  );

  $answers = vopros_answer_load_for_question($question->question_id);
  $label = t('Answer question');
  foreach ($answers as $answer) {
    if (trim($answer->answer_content)) {
      $label = t('Edit answer');
    }
  }

  $form['answer_question'] = array(
    '#type' => 'submit',
    '#value' => $label,
  );

  return $form;
}

/**
 * Submit handler for function vopros_answer_question_view_form().
 */
function vopros_answer_question_view_form_validate($form, &$form_state) {
  $question = vopros_question_load($form_state['values']['question']->question_id, NULL, TRUE);
  if ($question->question_status != 'new' && $question->question_status != 'active' && $question->uid != $GLOBALS['user']->uid) {
    form_set_error('', t("You can't answer the question, the question is already being answered"));
  }
  $form_state['values']['question'] = $question;
}

/**
 * Submit handler for vopros_answer_question_view_form().
 * Handles locking a question to the user and adding an answer is none is created yet.
 */
function vopros_answer_question_view_form_submit($form, &$form_state) {
  drupal_set_message(t('The question been locked for you, while you are answering it.'), 'warning');
  $question = $form_state['values']['question'];
  $question->question_status = 'assigned';
  $question->question_status_reason = 'locked for answering';
  $question->uid = $GLOBALS['user']->uid;
  $question->save();
  $answers = vopros_answer_load_for_question($question->question_id);
  if (count($answers) !== 1) {
    $answer = vopros_answer_new();
    $answer->answer_content = '';
    $answer->question_id = $question->question_id;
  }
  else {
    $answer = array_shift($answers);
  }
  $answer->uid = $GLOBALS['user']->uid;
  $answer->author_name = $GLOBALS['user']->name;
  vopros_answer_save($answer);

  // Save the answer in case there's other submit handlers that want in on the
  // party.
  $form_state['answer'] = $answer;
  $form_state['redirect'] = 'admin/vopros/answers/' . $answer->answer_id . '/edit';
}

/**
 * Checks answer access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create',
 *   'delete' or 'revision'.
 * @param $answer
 *   Optionally an anwer to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_answer_access($op, $answer = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any answer for administrators.
  if (user_access('administer answers', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access orders permission
  // or to a user's own orders with the view own orders permission.
  if ($op == 'view') {
    if (user_access('access answers', $account)) {
      return TRUE;
    }
    elseif (user_access('view own answers', $account) && $answer->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create answers', $account)) {
    return TRUE;
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit any answer', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the uid.
    if ($account->uid && user_access('edit own answers', $account) && $answer->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'revision') {
    if (user_access('access and use revisions for answers', $account)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Function to determine if a user should be able to create an answer for a question
 */
function vopros_answer_question_access($question, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);
  if ($question->question_status == 'assigned' && ($question->uid == $account->uid || user_access('administer answers', $account))) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'vopros_answer', '=')
      ->propertyCondition('question_id', $question->question_id, '=')
      ->count();
    if ($query->execute() > 0) {
      return FALSE;
    }
    return TRUE;
  }
  if ($question->question_status != 'new') {
    return FALSE;
  }
  return vopros_answer_access('create');
}

function vopros_answer_theme() {
  return array(
    'vopros_answer_answer_content' => array(
      'render element' => 'answer',
      'file' => 'includes/vopros_answer.theme.inc',
    ),
    'vopros_answer_answers_pl_content' => array(
      'variables' => array('answers' => NULL, 'edit' => NULL),
      'file' => 'includes/vopros_answer.theme.inc',
    )
  );
}
