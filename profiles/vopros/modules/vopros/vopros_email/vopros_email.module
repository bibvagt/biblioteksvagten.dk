<?php

/**
 * @file
 * Provides mail handling for Vopros.
 */

/**
 * Implements hook_entity_info().
 */
function vopros_email_entity_info() {
  $return = array(
    'vopros_email' => array(
      'label' => t('Email', array(), array('context' => 'a vopros email')),
      'plural label' => t('Emails', array(), array('context' => 'a vopros email')),
      'controller class' => 'VoprosEmailEntityController',
      'entity class' => 'VoprosEmail',
      'base table' => 'vopros_email',
      'revision table' => 'vopros_email_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'email_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_email' => array(
          'label' => t('Email', array(), array('context' => 'a vopros email')),
          'admin' => array(
            'path' => 'admin/vopros/config/email',
            'access arguments' => array('administer emails'),
          ),
        ),
      ),
      'load hook' => 'vopros_email_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_email_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_init().
 */
function vopros_email_init() {
  drupal_add_css(drupal_get_path('module', 'vopros_email') . '/theme/vopros_email.base.css');
}

/**
 * Implements hook_enabled().
 */
function vopros_email_enable() {
  // When the module is enabled, we need to make sure that the
  // menu is buildt correctly with the entity info.
  menu_rebuild();
  vopros_email_configure_email();
}

/**
 * Implements hook_menu().
 */
function vopros_email_menu() {
  return array(
    'admin/vopros/config/email' => array(
      'title' => 'Email settings',
      'description' => 'Configure general email settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_settings_form'),
      'access arguments' => array('administer emails'),
      'file' => 'includes/vopros_email.admin.inc',
    ),
    'admin/vopros/config/email/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/answers/%vopros_answer/new-email' => array(
      'title' => 'Answer question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_form', vopros_email_new(), 3),
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('update', 3),
      'file' => 'includes/vopros_email.admin.inc',
    ),
    'admin/vopros/emails/%vopros_email' => array(
      'title callback' => 'vopros_email_title',
      'title arguments' => array(3),
      'page callback' => 'vopros_email_page_view',
      'page arguments' => array(3),
      'access callback' => 'vopros_email_access',
      'access arguments' => array('view'),
      'file' => 'includes/vopros_email.admin.inc',
    ),
    'admin/vopros/emails/%vopros_email/view' => array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/emails/%vopros_email/delete' => array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_delete_confirm_form', 3),
      'access callback' => 'vopros_email_access',
      'access arguments' => array('delete'),
      'file' => 'includes/vopros_email.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/vopros/emails/%vopros_email/convert' => array(
      'title' => 'Convert',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_convert_to_question_form', 3),
      'access callback' => 'vopros_email_access',
      'access arguments' => array('edit'),
      'file' => 'includes/vopros_email.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/vopros/emails/%vopros_email/forward' => array(
      'title' => 'Forward',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_forward_form', 3),
      'access callback' => 'vopros_email_access',
      'access arguments' => array('edit'),
      'file' => 'includes/vopros_email.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/vopros/questions/%vopros_question/email' => array(
      'title' => 'Contact user',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_question_contact_form', 3),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('contact', 3),
      'file' => 'includes/vopros_email.admin.inc',
    ),
    'admin/vopros/questions/%vopros_question/bounce/%' => array(
      'title' => 'Send mail to channel source',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_question_bounce_form', 3, 5),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('contact', 3),
      'file' => 'includes/vopros_email.admin.inc',
    ),
    'admin/vopros/emails/%vopros_email/transfer' => array(
      'title' => 'Transfer email',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_email_transfer_form', 3),
      'access callback' => 'vopros_email_access',
      'access arguments' => array('edit'),
      'file' => 'includes/vopros_email.admin.inc',
    ),
  );
}

/**
 * Title callback for emails.
 */
function vopros_email_title($email) {
  return isset($email->subject) && !empty($email->subject) ? $email->subject : t('New email');
}

/**
 * Implements hook_entity_property_info().
 */
function vopros_email_entity_property_info() {
  $info = array();

  // Add meta-data about question and answer properties.
  $properties = &$info['vopros_email']['properties'];

  $properties['answer'] = array(
    'label' => t('Answer'),
    'type' => 'vopros_answer',
    'description' => t('The unique ID of answer the email belongs to.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('answer_id'),
    'schema field' => 'vopros_answer',
  );

  $properties['question'] = array(
    'label' => t('Question'),
    'type' => 'vopros_question',
    'description' => t('The unique ID of the question the answer belongs to.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('question_id'),
    'schema field' => 'vopros_question',
  );

  return $info;
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_email_views_data_alter(&$data) {
  $data['vopros_email']['answer_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_answer',
    'field' => 'answer_id',
    'label' => 'answer',
  );

  $data['vopros_email']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'question',
  );

  $data['vopros_email']['uid']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'users',
    'field' => 'uid',
    'label' => 'user',
  );

  $data['vopros_email']['revision_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_email_revision',
    'field' => 'revision_id',
    'label' => 'Email revision',
  );

  // Handle time stamps as dates.
  $data['vopros_email']['created']['field']['handler'] =
  $data['vopros_email']['changed']['field']['handler']  = 'views_handler_field_date';
  $data['vopros_email']['created']['sort']['handler'] =
  $data['vopros_email']['changed']['sort']['handler'] = 'views_handler_sort_date';
  $data['vopros_email']['created']['filter']['handler'] =
  $data['vopros_email']['changed']['filter']['handler'] = 'views_handler_filter_date';

  // Handle the options possible for the type property.
  $data['vopros_email']['type']['field']['handler'] = 'vopros_email_handler_field_vopros_email';
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vopros_email_entity_property_info_alter(&$info) {
  // Need to clear the question cache when the question_id is altered.
  $info['vopros_email']['properties']['answer_id']['clear'] = array('question');
}

/**
 * Implements hook_permission().
 */
function vopros_email_permission() {
  $permissions = array(
    'administer emails' => array(
      'title' => t('Administer emails'),
      'restrict access' => TRUE,
      'vopros roles' => array('staff'),
    ),
    'access emails' => array(
      'title' => t('Access lists of emails, primarily for viewing and referencing'),
      'vopros roles' => array('staff'),
    ),
    'create emails' => array(
      'title' => t('Create emails'),
      'vopros roles' => array('staff'),
    ),
    'edit any email' => array(
      'title' => t('Edit any email'),
      'restrict access' => TRUE,
      'vopros roles' => array('staff'),
    ),
    'edit own emails' => array(
      'title' => t('Edit own emails'),
      'vopros roles' => array('staff'),
    ),
    'view own emails' => array(
      'title' => t('View own emails'),
      'vopros roles' => array('staff'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_vopros_question_user_answer_preference().
 */
function vopros_email_vopros_question_user_answer_preference() {
  return array(
    'mail' => t('Email'),
  );
}

/**
 * Implements hook_vopros_question_channels().
 */
function vopros_email_vopros_question_channels() {
  return array(
    'mail' => array(
      'name' => t('E-mail'),
      'data render' => 'vopros_embed_channel_data_render',
    ),
  );
}

/**
 * Checks email access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $email
 *   Optionally an email to check access for.
 *    - Required for checking edit and delete access.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_email_access($op, $email = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any email for administrators.
  if (user_access('administer emails', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access orders permission
  // or to a user's own orders with the view own orders permission.
  if ($op == 'view') {
    if (user_access('access emails', $account)) {
      return TRUE;
    }
    elseif (user_access('view own emails', $account) && $email->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create emails', $account)) {
    return TRUE;
  }

  if (isset($email) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any email', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the uid.
    if ($account->uid && user_access('edit own emails', $account) && $email->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Create a new email object.
 */
function vopros_email_new($values = array()) {
  $default_values = array(
    'status' => 'unsent',
    'type' => 'outgoing',
  );
  $values += $default_values;
  // During installation, the entity might not be available for menu item.
  // So we need to create a fake entity in that case.
  if (!entity_get_info('vopros_email')) {
    return new stdClass();
  }
  return entity_create('vopros_email', $values);
}

/**
 * Save a email.
 *
 * @param $email
 *    The email object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_email_save($email, $revision = 0) {
  $email->revision = $revision;
  entity_save('vopros_email', $email);
}

/**
 * Loads an email by ID.
 */
function vopros_email_load($email_id, $reset = FALSE) {
  $emails = vopros_email_load_multiple(array($email_id), array(), $reset);
  return $emails ? reset($emails) : FALSE;
}

/**
 * Deletes an email by ID.
 *
 * @param $email_id
 *   The ID of the email to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function vopros_email_delete($email_id) {
  return entity_delete('vopros_email', $email_id);
}

/**
 * Wrapper function to send the actual email.
 *
 * @param $email
 *    The email entity object
 * @param $template
 *    Which template to use for the email (not used atm)
 */
function vopros_email_send($email, $template = 'default') {
  $params = array(
    'template' => $template,
    'email' => $email,
  );
  return drupal_mail('vopros_email', 'vopros_email', $email->email, user_preferred_language($GLOBALS['user']), $params);
}

/**
 * Loads multiple emails by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $email_ids
 *   An array of email IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_email} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal email loading cache.
 *
 * @return
 *   An array of email objects indexed by email_id.
 */
function vopros_email_load_multiple($email_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_email', $email_ids, $conditions, $reset);
}

/**
 * Implements hook_mail().
 */
function vopros_email_mail($key, &$message, $params) {
  switch ($key) {
    case 'vopros_email':
      $email = $params['email'];

      $message['subject'] = $email->subject;
      if ($email->question_id) {
        $message['subject'] .= ' [#' . $email->question_id . ']';
      }

      if ($email->reply_to) {
        $message['headers']['Reply-To'] = $email->reply_to;
      }

      $attachments = array();
      $body = $email->email_content;

      $email_wrapper = entity_metadata_wrapper('vopros_email', $email);

      foreach ($email_wrapper->vopros_email_attachment as $file) {
        // Get the actual file value array().
        $fv = $file->value();
        if (!isset($fv['uri'])) {
          $fv = (array) file_load($fv['fid']);
        }
        $filedata = file_get_contents(drupal_realpath($fv['uri']));
        $filename = $fv['filename'];
        $filemime = $fv['filemime'];

        $parts = pathinfo($fv['uri']);
        $attachments[] = array(
          'filecontent' => $filedata,
          'filename' => $filename,
          'filemime' => $filemime,
          'extension' => $parts['extension'],
        );
      }

      $message['params']['attachments'] = $attachments;
      $message['body'][] = $body;
      break;

    case 'forward_email':
      $email = $params['email'];
      $message['headers']['Reply-To'] = $email->email;
      $message['subject'] = t('[@site] FWD: @subject', array(
        '@site' => variable_get('site_name', 'Vopros'),
        '@subject' => $email->subject,
      ));
      if ($params['message']) {
        $message['body'][] = $params['message'];
      }

      $message['body'][] = t('------ Forwarded by @user fra @site ------', array(
        '@site' => variable_get('site_name', 'Vopros'),
        '@user' => (!empty($params['user']) ? $params['user'] : 'unknown'),
      ));

      $message['body'][] = '';
      $message['body'][] = $email->email_content;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_email_form_vopros_answer_form_alter(&$form, &$form_state) {
  // Hook into the form, if user wants an sms sent.
  if ($form['question']['#value']->user_answer_preference == 'mail') {
    $form['form']['save_submit']['#submit'][] = 'vopros_email_form_vopros_answer_form_submit';
    $form['action']['save_submit']['#submit'][] = 'vopros_email_form_vopros_answer_form_submit';
  }
}

/**
 * Submit handler.
 */
function vopros_email_form_vopros_answer_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/answers/' . $form_state['answer']->answer_id . '/new-email';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_email_form_vopros_question_handle_question_form_alter(&$form, &$form_state) {
  if ($form['question']['#value']->user_answer_preference == 'mail') {
    $form['actions']['contact']['#submit'][] = 'vopros_email_form_vopros_question_contact_user_submit';
  }
}

/**
 * Redirect users to the compose email form.
 */
function vopros_email_form_vopros_question_contact_user_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/email';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_email_form_vopros_question_question_frontend_form_alter(&$form, &$form_state) {
  if ($form['question']['#value']->user_answer_preference == 'mail') {
    $form['buttons']['contact']['#submit'][] = 'vopros_email_form_vopros_question_contact_user_submit';
  }
}

/**
 * Implements hook_entity_insert().
 */
function vopros_email_entity_insert($entity, $type) {
  if ($type == 'vopros_email' && $entity->type == 'ingoing' && $entity->question_id) {
    $question = vopros_question_load($entity->question_id);
    if ($question->question_status == 'closed' || $question->question_status == 'answered') {
      $question->question_status = 'active';
      $question->question_status_reason = 'reactivated by email';
      $question->save();
      // Since saving the question will be done by whatever user is the global
      // user, we change it to be the user 0 that did this.
      db_update('vopros_question_revision')
        ->fields(array(
          'revision_uid' => 0,
        ))
        ->condition('revision_id', $question->revision_id, '=')
        ->execute();
    }
  }
}

/**
 * Implements hook_views_api().
 */
function vopros_email_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vopros_email') . '/includes/views',
  );
}

/**
 * Builds a structured array representing the emails content.
 */
function vopros_email_build_content($email, $view_mode = 'administrator', $langcode = NULL) {
  $type = ($email->type == 'ingoing') ? 'Tilbagemelding' : 'Svar';

  $email->content = array(
    '#prefix' => '<div class="vopros-email-display ' . $email->type . '">',
    '#suffix' => '</div>',
    'body' => array(
      '#prefix' => '<div class="body clearfix">',
      '#weight' => 0,
      '#suffix' => '</div>',
    ),
    'header' => array(
      '#prefix' => '<div class="header">',
      '#suffix' => '</div>',
      '#weight' => -1,
    ),
    'type' => array(
      '#prefix' => '<div class="type">' . t($type) . '<span class="count"></span>',
      '#suffix' => '</div>',
      '#weight' => -2,
    ),
  );
  field_attach_prepare_view('vopros_email', array($email->email_id => $email), $view_mode);
  entity_prepare_view('vopros_email', array($email->email_id => $email));

  // Add extra fields.
  $email->content['header']['to'] = array(
    '#theme' => 'vopros_email_to_email',
    '#email' => $email,
    '#view_mode' => $view_mode,
  );
  $email->content['header']['from'] = array(
    '#theme' => 'vopros_email_from_email',
    '#email' => $email,
    '#view_mode' => $view_mode,
  );
  $email->content['header']['subject'] = array(
    '#theme' => 'vopros_email_subject',
    '#email' => $email,
    '#view_mode' => $view_mode,
  );
  $email->content['header']['sent'] = array(
    '#theme' => 'vopros_email_sent',
    '#email' => $email,
    '#view_mode' => $view_mode,
  );
  if ($email->type == 'ingoing' && $email->question_id > 0) {
    $email->content['header']['transfer_link'] = array(
      '#theme' => 'vopros_email_transfer_link',
      '#email' => $email,
      '#view_mode' => $view_mode,
    );
  }
  $email->content['body']['email_content'] = array(
    '#theme' => 'vopros_email_content',
    '#email' => $email,
    '#view_mode' => $view_mode,
  );

  $email->content['body']['email_content']['#attached'] = array(
    'js' => array(drupal_get_path('module', 'vopros_email') . '/js/vopros_email.question_feed.js'),
  );

  // Add fields.
  field_attach_prepare_view('vopros_email', array($email->email_id => $email), $view_mode, $langcode);
  $email->content['body'][] = field_attach_view('vopros_email', $email, $view_mode, $langcode);

  module_invoke_all('entity_view', $email, 'vopros_email', $view_mode, $langcode);
}


/**
 * Implements hook_field_extra_fields().
 */
function vopros_email_field_extra_fields() {
  $extra = array();

  $extra['vopros_email']['vopros_email'] = array(
    'form' => array(
      'subject' => array(
        'label' => t('Subject'),
        'description' => t('The subject of the question'),
        'weight' => -5,
      ),
      'email' => array(
        'label' => t('Email address'),
        'description' => t('The email address that the email has been sent to or from'),
        'weight' => -4,
      ),
      'email_content' => array(
        'label' => t('Content'),
        'description' => t('The content of the email'),
        'weight' => -3,
      ),
    ),
  );

  drupal_alter('vopros_question_field_extra_fields', $extra);

  return $extra;
}

/**
 * Implements hook_theme().
 */
function vopros_email_theme() {
  $path = drupal_get_path('module', 'vopros_email') . '/theme';
  return array(
    'vopros_email' => array(
      'render element' => 'elements',
      'template' => 'vopros-email',
      'path' => $path,
      'file' => 'vopros_email.theme.inc',
    ),
    'vopros_email_subject' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_content' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_email' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_type' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_question_feed' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_to_email' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_from_email' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_sent' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_transfer_link' => array(
      'render element' => 'email',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
    'vopros_email_transfer_feed' => array(
      'render element' => 'element',
      'file' => 'vopros_email.theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_email_vopros_question_activity_feed($question, &$feed) {
  $emails = vopros_email_load_multiple(FALSE, array('question_id' => $question->question_id));
  foreach ($emails as $email_id => $email) {
    // Add flag on email indicating whether this question was created from that
    // mail (and thus cannot be transferred to a new question).
    $query = db_select('vopros_email_transfers', 't')
           ->fields('t')
           ->condition('t.origin_question_id', $question->question_id)
           ->condition('t.email_id', $email_id);
    $email->no_transfer = (bool) $query->countQuery()->execute()->fetchField();

    vopros_email_build_content($email, 'question_list');
    $feed['email_' . $email_id] = $email->content;
    $feed['email_' . $email_id]['#weight'] = -($email->created - 1);
  }

  // Add feed items for emails transferred away from this question.
  $transfers = db_select('vopros_email_transfers', 't')
             ->fields('t')
             ->condition('t.origin_question_id', $question->question_id)
             ->execute();

  foreach ($transfers as $transfer) {
    $email = vopros_email_load($transfer->email_id);
    $email->transfer = TRUE;
    $email->transfer_uid = $transfer->uid;
    vopros_email_build_content($email, 'question_list');
    $feed['email_transfer_' . $transfer->email_transfer_id] = array(
      '#weight' => -($transfer->transfer_time - 1),
      'email_content' => $email->content,
      'transfer_status' => array(
        '#transfer' => $transfer,
        '#theme' => 'vopros_email_transfer_feed',
      ),
    );
  }
}

/**
 * Template preprocess function.
 *
 * Add a mail icon to the status in views if the question was re-opened by
 * mail.
 */
function vopros_email_preprocess_views_view_field(&$vars) {
  $view = $vars['view'];
  if ($view->name == 'vopros_question_list') {
    // Add icon on question status list, if the question has been reactivated
    // by mail.
    if (
      $vars['field']->field == 'question_status' &&
      !empty($vars['row']->vopros_question_question_status_reason) &&
      $vars['row']->vopros_question_question_status_reason == 'reactivated by email'
    ) {
      $path = drupal_get_path('module', 'vopros_email');
      $vars['output'] .= ' ' . theme('image', array('path' => $path . '/images/mail_icon.png'));
    }
  }
}


/**
 * Utility function that defines the possible types an email can have.
 */
function _vopros_email_type() {
  return array(
    'ingoing' => t('Ingoing'),
    'outgoing' => t('Outgoing'),
  );
}

/**
 * Configure the vopros email entity with fields.
 */
function vopros_email_configure_email() {
  $type = 'vopros_email';
  $bundle = 'vopros_email';

  // Create a taxonomy term reference field.
  $field_name = 'vopros_email_attachment';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => -1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'assigned' => TRUE,
      'field_name' => $field_name,
      'type' => 'file',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'weight' => 0,
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('File attachments'),
      'widget' => array(
        'type' => 'file_generic',
        'settings' => array(
          'progress_indicator' => 'throbber',
        ),
      ),
      'settings' => array(
        'file_directory' => 'vopros_email',
        'file_extensions' => 'txt gif png jpg jpeg pdf doc docx',
      ),

      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'file_default',
          'settings' => array(),
          'module' => 'file',
          'weight' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Returns default email macros.
 */
function _vopros_email_default_macro($type, $name) {
  static $macros = array(
    'need_more_info' => array(
      'subject' => 'Supplerende spørgsmål fra [site:name]',
      'body' => 'Kære [vopros_question:user-name]

Herning Bibliotekerne har modtaget dit spørgsmål, men har brug for følgende supplerende oplysninger for at kunne svar dig bedst muligt:



Med venlig hilsen
[site:name]

Du har spurgt om følgende:
[vopros_question:question-content]',
    ),
    'no_time_for_deadline' => array(
      'subject' => 'Interessefrist er overskredet',
      'body' => 'Kære  [vopros_question:user-name]
Det har desværre ikke været muligt at få besvaret dit spørgsmål inden for den interessefrist, du angiver. Såfremt du alligevel er interesseret i et svar, bedes du henvende dig igen.

Med venlig hilsen
[site:name]

Du har spurgt om følgende:
[vopros_question:question-content]',
    ),
    'message_for_user' => array(
      'subject' => 'Besked fra [site:name]',
      'body' => 'Kære  [vopros_question:user-name]



Med venlig hilsen
[site:name]

Du har spurgt om følgende
[vopros_question:question-content]',
    ),
    'answered_question' => array(
      'subject' => 'Svar fra [site:name]',
      'body' => 'Kære  [vopros_question:user-name]

Du har spurgt [site:name] om:

[vopros_question:question-content]

Vores svar er:

[vopros_answer:answer-content]

Med venlig hilsen
[vopros_answer:user:profile-vopros-user-librarian:vopros-user-first-name] [vopros_answer:user:profile-vopros-user-librarian:vopros-user-last-name]
[site:name]',
    ),
  );

  if (!empty($macros[$name][$type])) {
    return $macros[$name][$type];
  }

  return '';
}

/**
 * Get the subject macro for the given name.
 */
function _vopros_email_subject_macro($name) {
  return variable_get($name, _vopros_email_default_macro('subject', $name));
}

/**
 * Get the body macro for the given name.
 */
function _vopros_email_body_macro($name) {
  return variable_get($name, _vopros_email_default_macro('body', $name));
}
